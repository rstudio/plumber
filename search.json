[{"path":"https://www.rplumber.io/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"welcome contributions plumber package! submit contribution: Fork repository make changes. Submit pull request. Ensure signed contributor license agreement. appear “Check” PR comment “CLAassistant” also appear explaining whether yet sign. sign, can click “Recheck” link comment check flip reflect ’ve signed.","code":""},{"path":"https://www.rplumber.io/PULL_REQUEST_TEMPLATE.html","id":"pull-request","dir":"","previous_headings":"","what":"Pull Request","title":"NA","text":"submit pull request, please following: Add entry NEWS concisely describing changed. Add unit tests tests/testthat directory. Run Build->Check Package RStudio IDE, devtools::check(), make sure change add messages, warnings, errors. things make easier plumber development team evaluate pull request. Even , may still decide modify code even merge . Factors may prevent us merging pull request include: breaking backward compatibility adding feature consider relevant plumber hard understand hard maintain future computationally expensive intuitive people use try responsive provide feedback case decide merge pull request.","code":""},{"path":"https://www.rplumber.io/PULL_REQUEST_TEMPLATE.html","id":"minimal-reproducible-example","dir":"","previous_headings":"","what":"Minimal reproducible example","title":"NA","text":"Finally, please include minimal reprex. goal reprex make easy possible recreate problem can fix . ’ve never heard reprex , start reading https://github.com/jennybc/reprex#---reprex, follow advice page. include session info unless ’s explicitly asked , ’ve used reprex::reprex(..., si = TRUE) hide away. Delete instructions read . Brief description original problem approach behind solution. PR task list: - [ ] Update NEWS - [ ] Add tests - [ ] Update documentation devtools::document()","code":"reprex::reprex({   library(plumber)   # insert reprex here  }) # insert reprex here"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Annotations reference","text":"Annotations specially-structured comments used plumber file create API. full annotation line starts #* #', annotation keyword @..., number space characters followed content. recommended use #* differentiate roxygen2 annotations.","code":""},{"path":"https://www.rplumber.io/articles/annotations.html","id":"global-annotations","dir":"Articles","previous_headings":"","what":"Global annotations","title":"Annotations reference","text":"Global annotations can used anywhere plumber file. independent annotations require expression.","code":""},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations-example","dir":"Articles","previous_headings":"Global annotations","what":"Annotations example","title":"Annotations reference","text":"","code":"#* @apiTitle Sample Pet Store App #* @apiDescription This is a sample server for a pet store. #* @apiTOS http://example.com/terms/ #* @apiContact list(name = \"API Support\", url = \"http://www.example.com/support\", email = \"support@example.com\") #* @apiLicense list(name = \"Apache 2.0\", url = \"https://www.apache.org/licenses/LICENSE-2.0.html\") #* @apiVersion 1.0.1 #* @apiTag pet Pets operations #* @apiTag toy Toys operations #* @apiTag \"toy space\" Toys operations"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"equivalent-programmatic-usage","dir":"Articles","previous_headings":"Global annotations","what":"Equivalent programmatic usage","title":"Annotations reference","text":"","code":"pr() %>%   pr_set_api_spec(function(spec) {     spec$info <- list(       title = \"Sample Pet Store App\",       description = \"This is a sample server for a pet store.\",       termsOfService = \"http://example.com/terms/\",       contact = list(name = \"API Support\", url = \"http://www.example.com/support\", email = \"support@example.com\"),       license = list(name = \"Apache 2.0\", url = \"https://www.apache.org/licenses/LICENSE-2.0.html\"),       version = \"1.0.1\"     )     spec$tags <- list(list(name = \"pet\", description = \"Pets operations\"), list(name = \"toy\", description = \"Toys operations\"), list(name = \"toy space\", description = \"Toys operations\"))     spec   })"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"block-annotations","dir":"Articles","previous_headings":"","what":"Block annotations","title":"Annotations reference","text":"block annotations combination annotations create either endpoint, filter, static file handler Plumber object modifier. Block annotations always followed expression.","code":""},{"path":[]},{"path":"https://www.rplumber.io/articles/annotations.html","id":"more-details-on-param","dir":"Articles","previous_headings":"Block annotations > Endpoint","what":"More details on @param","title":"Annotations reference","text":"Types used define API inputs. can use dynamic routes. Note Plumber first look block expression set endpoint parameters names, types default value. @param annotations dynamic route/path defined parameters override Plumber guesses block expression. Query parameters currently need explicitly converted pushed (character) block expression. dynamic route parameters converted specified @param type pushed block expression. Plumber parameter type OpenAPI type reference. programmatic use, pick one asterisk.","code":""},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations-example-1","dir":"Articles","previous_headings":"Block annotations > Endpoint > More details on @param","what":"Annotations example","title":"Annotations reference","text":"","code":"#* @get /query/parameters #* @serializer text #* @param name:str* #* @param age:[int] function(name, age) {   # Explicit conversion is required for query parameters   age <- as.integer(age)   if (is.na(age)) age <- 0L   sprintf(\"%s is %i years old\", name, max(age)) }  #* @get /dyn/<name:str>/<age:[int]>/route #* @serializer text #* @parser none #* @response 200 A sentence function(name, age) {   sprintf(\"%s is %i years old\", name, age) }  #* @post /upload_file #* @serializer rds #* @parser multi #* @parser rds #* @param f:file A file #* Upload an rds file and return the object function(f) {   as_attachment(f[[1]], names(f)[1]) }"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"equivalent-programmatic-usage-1","dir":"Articles","previous_headings":"Block annotations > Endpoint > More details on @param","what":"Equivalent programmatic usage","title":"Annotations reference","text":"","code":"text_handler <- function(name, age) { sprintf(\"%s is %i years old\", name, max(age)) } qp_handler <- function(name, age) { age <- as.integer(age); text_handler(name, age) } file_handler <- function(file) { as_attachment(file[[1]], names(file)[1]) } pr() %>%   pr_get(path = \"/query/parameters\",          handler = qp_handler,          serializer = serializer_text(),          params = list(\"name\" = list(type = \"string\", required = TRUE, isArray = FALSE),                        \"age\" = list(type = \"integer\", required = FALSE, isArray = TRUE))) %>%   pr_get(path = \"/dyn/<name:str>/<age:[int]>/route\",          handler = text_handler,          serializer = serializer_text(),          parsers = \"none\",          responses = list(\"200\" = list(description = \"A sentence\"))) %>%   pr_post(path = \"/upload_file\",           handler = file_handler,           serializer = serializer_rds(),           parsers = c(\"multi\", \"rds\"),           params = list(\"file\" = list(type = \"file\", desc = \"A file\", required = FALSE, isArray = FALSE)),           comments = \"Upload an rds file and return the object\")"},{"path":[]},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations-example-2","dir":"Articles","previous_headings":"Block annotations > Filter","what":"Annotations example","title":"Annotations reference","text":"","code":"#* @filter logger function(req){   cat(as.character(Sys.time()), \"-\",     req$REQUEST_METHOD, req$PATH_INFO, \"-\",     req$HTTP_USER_AGENT, \"@\", req$REMOTE_ADDR, \"\\n\")   plumber::forward() }"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"equivalent-programmatic-usage-2","dir":"Articles","previous_headings":"Block annotations > Filter","what":"Equivalent programmatic usage","title":"Annotations reference","text":"","code":"pr() %>%   pr_filter(\"logger\", function(req){     cat(as.character(Sys.time()), \"-\",       req$REQUEST_METHOD, req$PATH_INFO, \"-\",       req$HTTP_USER_AGENT, \"@\", req$REMOTE_ADDR, \"\\n\")     plumber::forward()   })"},{"path":[]},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations-example-3","dir":"Articles","previous_headings":"Block annotations > Static File Handler","what":"Annotations example","title":"Annotations reference","text":"","code":"#* @assets ./files/static list()  #* @assets ./files/static /static list()  #* @assets ./files/static / list()"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"equivalent-programmatic-usage-note-that-argument-order-is-reversed","dir":"Articles","previous_headings":"Block annotations > Static File Handler","what":"Equivalent programmatic usage (note that argument order is reversed)","title":"Annotations reference","text":"","code":"pr() %>%   pr_static(direc = \"./files/static\")  pr() %>%   pr_static(\"/static\", \"./files/static\")  pr() %>%   pr_static(\"/\", \"./files/static\")"},{"path":[]},{"path":"https://www.rplumber.io/articles/annotations.html","id":"annotations-example-4","dir":"Articles","previous_headings":"Block annotations > Plumber Router Modifier","what":"Annotations example","title":"Annotations reference","text":"","code":"#* @plumber function(pr) {   pr %>%     pr_set_debug(TRUE) %>%     pr_set_docs(\"swagger\") }  # Named function debug_swagger <- function(pr) {   pr %>%     pr_set_debug(TRUE) %>%     pr_set_docs(\"swagger\") }  #* @plumber debug_swagger"},{"path":"https://www.rplumber.io/articles/annotations.html","id":"equivalent-programmatic-usage-3","dir":"Articles","previous_headings":"Block annotations > Plumber Router Modifier","what":"Equivalent programmatic usage","title":"Annotations reference","text":"","code":"pr() %>%   pr_set_debug(TRUE) %>%   pr_set_docs(\"swagger\")"},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"execution-model","dir":"Articles","previous_headings":"","what":"Execution Model","title":"Runtime","text":"plumb() file, Plumber calls source() file evaluate top-level code defined. call plumb() file, counter variable created live environment created API. However, endpoint defined evaluated invoked response incoming request. endpoint uses <<-, “double-assignment” operator, mutates counter variable previously defined file plumb()d. technique allows endpoints filters share data defined top-level API.","code":"# Global code; gets executed at plumb() time. counter <- 0  #* @get / function(){   # Only gets evaluated when this endpoint is requested.   counter <<- counter + 1 }"},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"environments","dir":"Articles","previous_headings":"","what":"Environments","title":"Runtime","text":"default, create new Plumber router (happens implicitly call plumb() file), new environment created especially router. environment expressions evaluated endpoints invoked. can become important consider mounting routers onto one another. case, may expect able share state via environment, work default. ’re creating routers programmatically, can specify environment initializing Plumber router using envir parameter. environment : decorated R script, provided, source()d. expressions evaluated. endpoint filter functions executed. important aware subrouters, default, environment. want multiple Plumber routers share environment, need provide single, shared environment create routers.","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"performance-request-processing","dir":"Articles","previous_headings":"","what":"Performance & Request Processing","title":"Runtime","text":"R single-threaded programming language, meaning can one task time. still true serving APIs using Plumber, single endpoint takes two seconds generate response, every time endpoint requested, R process unable respond additional incoming requests two seconds. Incoming HTTP requests serviced order appeared, requests coming quickly can processed API, backlog requests accrue. common solutions problem either : Keep API performant. filters endpoints complete quickly long-running complicated tasks done outside API process. Run multiple R processes redundantly host single Plumber API load-balance incoming requests available processes. See hosting section details hosting environments support feature.","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"managing-state","dir":"Articles","previous_headings":"","what":"Managing State","title":"Runtime","text":"Often, Plumber APIs require coordination state. state may need shared multiple endpoints API (e.g. counter increments every time endpoint invoked). Alternatively, information needs persisted across requests single client (e.g. storing preference setting user). Lastly, might require coordinating multiple Plumber processes running independently behind load-balancer. scenarios unique properties determine solution might appropriate. previously discussed, R single-threaded. Therefore ’s important consider fact may eventually need multiple R processes running parallel handle incoming traffic API. may seem important initially, may thank later designing “horizontally scalable” API (one can scaled adding R processes parallel). key building horizontally scalable API ensure Plumber process “stateless,” meaning persistent state lives outside Plumber process. hosting environments exist today, guaranteed two subsequent requests single client served process. Thus ’s never safe assume information stored -memory available requests horizontally scaled app. options consider coordinate state Plumber API.","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"in-memory","dir":"Articles","previous_headings":"Managing State","what":"In-Memory","title":"Runtime","text":"shown previous Execution Model section, possible share state using environment associated Plumber router. one approach presented allow Plumber process stateless. approach sufficient coordinating state within single process, scale API adding processes, state longer coordinated . Therefore approach can effective “read-” data – load single, large dataset memory API starts, allow filters endpoints reference dataset moving forward – allow share state across multiple processes scale. want build scalable, stateless application, avoid relying -memory R environment coordinate state pieces API.","code":"# Global code; gets executed at plumb() time. counter <- 0  #* @get / function(){   # Only gets evaluated when this endpoint is requested.   counter <<- counter + 1 }"},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"file-system","dir":"Articles","previous_headings":"Managing State","what":"File System","title":"Runtime","text":"Writing files disk often next obvious choice storing state. Plumber APIs modify data frame use write.csv() save data disk, use writeLines() append new data existing file. approaches enable R process stateless, always resilient concurrency issues. instance, ’ve horizontally scaled API five R processes two go write.csv() simultaneously, either see one process’s data get immediately overwritten ’s, – even worse – may end corrupted CSV file can’t read. Unless otherwise stated, ’s safe assume R function writes data disk resilient concurrency contention, rely filesystem coordinate shared state single R process running concurrently. ’s also important ask whether hosting platform ’ll using supports persistent storage disk. instance, Docker may insulate R process hardware allow write outside container. RStudio Connect, , provision new directory every time deploy updated version API discard data written disk point. ’re considering writing state disk long-term, sure hosting environment supports persistent -disk storage ’ve considered concurrency implications code.","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"state-cookies","dir":"Articles","previous_headings":"Managing State","what":"Cookies","title":"Runtime","text":"HTTP cookies convention allow web servers send state client expectation client include state future requests. See Setting Cookies section details leverage cookies Plumber. modern web browsers support cookies (unless configured ) many clients , well, though clients require additional configuration order . ’re confident intended clients API support cookies consider storing state cookies. approach mitigates concerns horizontal scalability, state written client independently included subsequent requests client. also minimizes infrastructure requirements hosting Plumber APIs since don’t need setup system capable storing state; instead, ’ve commissioned clients store state. One issue maintaining state cookies size kept minimum. Clients impose restrictions differently, plan store 4kB information cookie. realize whatever information gets placed cookie must retransmitted client every request. can significantly increase size HTTP request clients make. notable concern considering using cookies store state since clients responsible storing sending state, expect state tampered . Thus, may acceptable store user preferences like preferredColor=\"blue\", store authentication information like userID=1493, since user trivially change cookie another user’s ID impersonate . ’d like use cookies store information guarantees user either read modify state, see Encrypted Cookies section).","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"external-data-store","dir":"Articles","previous_headings":"Managing State","what":"External Data Store","title":"Runtime","text":"final option consider coordinating state API leveraging external data store. relational database (like MySQL Amazon RedShift), non-relational database (like MongoDB), transactional data store like Redis. One important consideration options ensure “transactional,” meaning two Plumber processes trying write time won’t overwrite one another. ’re interested pursuing option see solutions.rstudio.com/db/ look resources put together Shiny pertains dealing databases web-accessible R platform.","code":""},{"path":"https://www.rplumber.io/articles/execution-model.html","id":"exit-handlers","dir":"Articles","previous_headings":"","what":"Exit Handlers","title":"Runtime","text":"may useful define function want run API closing – instance, pool database connections need cleaned Plumber process terminated. can use exit hook define handler. interrupt API (instance pressing Escape key Ctrl+C) ’ll see Bye bye! printed console. can even register multiple exit hooks ’ll run order registered.","code":"pr(\"plumber.R\") %>%   pr_hook(\"exit\", function(){     print(\"Bye bye!\")   }) %>%   pr_run()"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"posit-connect","dir":"Articles","previous_headings":"","what":"Posit Connect","title":"Hosting","text":"Posit Connect enterprise publishing platform Posit. supports push-button publishing RStudio IDE variety R content types including Plumber APIs. Unlike options listed , Posit Connect automatically manages dependent packages files API recreates environment closely mimicking local development environment server. Posit Connect automatically manages number R processes necessary handle current load balances incoming traffic across available processes. can also shut idle processes ’re use. allows run appropriate number R processes scale capacity accommodate current load.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"digitalocean","dir":"Articles","previous_headings":"","what":"DigitalOcean","title":"Hosting","text":"DigitalOcean easy--use Cloud Computing provider. offer simple way spin Linux virtual machine access remotely. can choose size machine want run – options ranging small machines 512MB RAM dollars month large machines dozens GB RAM – pay ’s online. deploy Plumber API DigitalOcean, please check plumber companion package plumberDeploy.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"docker","dir":"Articles","previous_headings":"","what":"Docker (Basic)","title":"Hosting","text":"Docker platform built top Linux Containers allow run processes isolated environment; environment might certain resources/software pre-configured may emulate particular Linux environment like Ubuntu 14.04 CentOS 7.3. won’t delve details Docker setup install everything system. Docker provides great resources looking get started. ’ll assume Docker installed ’re familiar basic commands required spin container. article, ’ll take advantage rstudio/plumber Docker image bundles recent version R recent version plumber pre-installed (underlying R image courtesy rocker project). can get image Remember get current snapshot Plumber continue use image run pull .","code":"docker pull rstudio/plumber"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"default-dockerfile","dir":"Articles","previous_headings":"Docker (Basic)","what":"Default Dockerfile","title":"Hosting","text":"’ll start just running single Plumber application Docker just see things work. default, rstudio/plumber image take first argument image name name file want plumb() serve port 8000. right away can run one examples ’s included plumber already installed image. : docker run tells Docker run new container --rm tells Docker clean-container ’s done -p 8000:8000 says map port 8000 plumber container (’ll run server) port 8000 local machine rstudio/plumber name image want run /usr/local/lib/R/site-library/plumber/plumber/03-mean-sum/plumber.R path inside Docker container Plumber file want host. ’ll note need plumber installed host machine work, path /usr/local/... need exist host machine. references path inside docker container R file want plumb() can found. mean-sum path default path image uses don’t specify one . ask Plumber plumb run file specified port 8000 new container. used -p argument, port 8000 local machine forwarded container. can test running machine Docker running: curl localhost:8000/mean, know IP address machine Docker running, visit web browser. /mean path one ’s defined plumber file just specified – get single number array back ([-0.1993]). works, can try using one plumber files arrangement. Keep mind file want run must available inside container must specify path file exists inside container. Keep simple now – use plumber file doesn’t require additional R packages depend files outside plumber definition. instance plumber file saved current directory called api.R, use following command ’ll notice used -v argument specify “volume” mapped host machine Docker container. defined location file /plumber.R, ’s argument give last tell container look plumber definition. can use technique share whole directory instead just passing single R file; approach useful Plumber API depends files. can also use rstudio/plumber image just like use . example, want start container based image poke around bash shell: can handy way debug problems. Prepare command think work add --entrypoint /bin/bash rstudio/plumber explore bit. Alternatively, can try run R process spawn plumber application see things go wrong (often missing package missing file).","code":"docker run --rm -p 8000:8000 rstudio/plumber docker run --rm -p 8000:8000 rstudio/plumber \\   /usr/local/lib/R/site-library/plumber/plumber/04-mean-sum/plumber.R docker run --rm -p 8000:8000 -v `pwd`/api.R:/plumber.R rstudio/plumber /plumber.R docker run -it --rm --entrypoint /bin/bash rstudio/plumber"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"custom-dockerfiles","dir":"Articles","previous_headings":"Docker (Basic)","what":"Custom Dockerfiles","title":"Hosting","text":"can build upon rstudio/plumber image build Docker image writing Dockerfile. Dockerfiles vast array options possible configurations, see official docs want learn options. couple commands relevant : RUN runs command persists side-effects Docker image ’re building. want build new image broom package, add line Dockerfile says RUN R -e \"install.packages('broom')\" make broom package available new Docker image. ENTRYPOINT command run starting image. rstudio/plumber specifies entrypoint starts R, plumb()s file, run()s router. want change plumber starts, run extra commands (like add global processor) run router, ’ll need provide custom ENTRYPOINT. CMD default arguments provide ENTRYPOINT. rstudio/plumber uses first argument name file want plumb(). custom Dockerfile simple : Dockerfile just extend rstudio/plumber image two ways. First, RUNs one additional command install broom package. Second, customizes default CMD argument used running image. case, expected mount Plumber application container /app/plumber.R build custom Docker image Dockerfile using command docker build -t mycustomdocker . (. – current directory – directory Dockerfile stored). ’d able use docker run --rm -vpwd:/app mycustomdocker run custom image, passing application’s directory volume mounted /app.","code":"FROM rstudio/plumber LABEL org.opencontainers.image.authors=\"Docker User <docker@user.org>\"  RUN R -e \"install.packages('broom')\"  CMD [\"/app/plumber.R\"]"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"automatically-run-on-restart","dir":"Articles","previous_headings":"Docker (Basic)","what":"Automatically Run on Restart","title":"Hosting","text":"want container start automatically machine booted, can use --restart parameter docker run. docker run -p 1234:8000 -dit --restart=unless-stopped myCustomDocker run custom image created automatically every time machine boots expose plumber service port 1234 host machine, unless container explicitly stopped. Like hosting options, ’ll need make sure firewall allows connections port 1234 want others able access service.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"docker-advanced","dir":"Articles","previous_headings":"","what":"Docker (Advanced)","title":"Hosting","text":"already basic Docker instance running, may interested advanced configurations capable hosting multiple plumber applications single server even load-balancing across multiple plumber processes. order coordinate run multiple Plumber processes one server, install docker-compose system. included installations Docker, need follow instructions currently able run docker-compose command-line. Docker Compose helps orchestrate multiple Docker containers. ’re planning run one Plumber process, ’ll want use Docker Compose keep alive route traffic .","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"multiple-plumber-applications","dir":"Articles","previous_headings":"Docker (Advanced)","what":"Multiple Plumber Applications","title":"Hosting","text":"’ll use Docker Compose help us organize multiple Plumber processes. won’t go detail use Docker Compose, ’re new familiarize using official docs. define Docker Compose configuration defines behavior every Plumber application want run. ’ll first want setup Dockerfile defines desired behavior applications (outlined previously. use docker-compose.yml configuration like following: detail options options exist can found . configuration defines two Docker containers run app1 app2. associated files case laid disk follows: can see app2 simpler two apps; just plumber definition run plumb(). merely use default plumber Docker image image, customize command specify Plumber API definition can found container. Since ’re mapping host’s ./app2 /app inside container, definition found /app/plumber.R. specify always restart anything ever happens container, export port 8000 container port 7001 host. app1 complicated app. extra data another directory needs loaded, custom Dockerfile. additional R packages system dependencies requires. now run docker-compose , Docker Compose build referenced images config file run . ’ll find app1 available port 7000 machine running Docker Compose, app2 available port 7001. want APIs run background survive restarts server, can use -d switch just like docker run.","code":"services:   app1:     build: ./app1/     volumes:      - ./data:/data      - ./app1:/app     restart: always     ports:      - \"7000:8000\"   app2:     image: rstudio/plumber     command: /app/plumber.R     volumes:      - ../app2:/app     restart: always     ports:      - \"7001:8000\" docker-compose.yml app1 ├── Dockerfile ├── api.R app2 ├── plumber.R data ├── data.csv"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"multiple-applications-on-one-port","dir":"Articles","previous_headings":"Docker (Advanced)","what":"Multiple Applications on One Port","title":"Hosting","text":"may desirable run Plumber services standard port like 80 (HTTP) 443 (HTTPS). case, ’d prefer router running port 80 can send traffic appropriate Plumber API distinguishing based path prefix. Requests myserver.com/app1/ sent app1 container, myserver.org/app2/ target app2 container, paths available port 80 server. order , can use another Docker container running nginx configured route traffic two Plumber containers. ’d add following entry docker-compose.yml app containers already defined. uses nginx Docker image downloaded . order run nginx meaningful way, provide configuration file place /etc/nginx/nginx.conf, mounting local file location container. basic nginx config file look something like following: set server_name parameter whatever public address server. can save file nginx.conf directory Compose config file. Docker Compose intelligent enough know route traffic http://app1:8000/ app1 container, port 8000, can leverage config file. Docker containers able contact non-public ports, can go directly port 8000 containers. proxy configuration trim prefix request sends applications, applications don’t need know anything hosted publicly URL includes /app1/ /app2/ prefixes. also get rid previous port mappings ports 7000 7001 applications, don’t want expose APIs ports anymore. now run docker compose , ’ll see two application servers running now new nginx server running, well. ’ll find visit server port 80, ’ll see “welcome Nginx!” page. access /app1 ’ll sent app1 just like hoped.","code":"nginx:     image: nginx:1.9     ports:      - \"80:80\"     volumes:      - ./nginx.conf:/etc/nginx/nginx.conf:ro     restart: always     depends_on:      - app1      - app2 events {   worker_connections  4096;  ## Default: 1024 }  http {         default_type application/octet-stream;         sendfile     on;         tcp_nopush   on;         server_names_hash_bucket_size 128; # this seems to be required for some vhosts          server {                 listen 80 default_server;                 listen [::]:80 default_server ipv6only=on;                  root /usr/share/nginx/html;                 index index.html index.htm;                  server_name MYSERVER.ORG;                  location /app1/ {                         proxy_pass http://app1:8000/;                         proxy_set_header Host $host;                 }                  location /app2/ {                         proxy_pass http://app2:8000/;                         proxy_set_header Host $host;                 }                   location ~ /\\.ht {                         deny all;                 }         } }"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"load-balancing","dir":"Articles","previous_headings":"Docker (Advanced)","what":"Load Balancing","title":"Hosting","text":"’re expecting lot traffic one application API ’s particularly computationally complex, may want distribute load across multiple R processes running Plumber application. Thankfully, can use Docker Compose , well. First, ’ll want create multiple instances application. easily accomplished docker-compose scale command. simply run docker-compose scale app1=3 run three instances app1. Now just need load balance traffic across three instances. setup nginx configuration already balance traffic across pool workers, need manually re-configure update nginx instance every time need scale number , might hassle. Luckily, ’s elegant solution. can use dockercloud/haproxy Docker image automatically balance HTTP traffic across pool workers. image intelligent enough listen workers pool arriving leaving automatically remove/add containers pool. Let’s add new container configuration defines load balancer trick allows image listen scaling app1 passing docker socket shared volume. Note particular arrangement differ based host OS. configuration intended Linux, MacOS X users require slightly different config. export port 80 new load balancer port 80 host machine solely wanted load-balance single application. Alternatively, can actually use nginx (handle routing various applications) HAProxy (handle load balancing particular application). , ’d merely add new location block nginx.conf file knows send traffic HAProxy, modify existing location block send traffic load balancer instead going directly application. location /app1/ block becomes: lb name HAProxy load balancer defined Compose configuration. next time start/redeploy Docker Compose cluster, ’ll balancing incoming requests /app1/ across pool 1 R processes based whatever ’ve set scale application. keep mind using load-balancing ’s longer guaranteed subsequent requests particular application land process. means maintain state Plumber application (like global counter, user’s session state), can’t expect shared across processes user might encounter. least three possible solutions problem: Use robust means maintaining state. put state database, instance, lives outside R processes Plumber processes get save state externally. serialize state user using (encrypted) session cookies, assuming ’s small enough. scenario, workers write data back user form cookie, user include cookie subsequent requests. works best state going set rarely read often (instance, cookie set user logs , read request detect identity user). can enable “sticky sessions” HAProxy load balancer. ensure user’s traffic always gets routed worker. downside approach distribute traffic less evenly. end situation 2 R processes application 90% traffic hitting one happens users triggering majority requests “stuck” one particular worker.","code":"lb:     image: 'dockercloud/haproxy:1.2.1'     links:      - app1     volumes:       - /var/run/docker.sock:/var/run/docker.sock location /app1/ {   proxy_pass http://lb/;   proxy_set_header Host $host; }"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"pm2","dir":"Articles","previous_headings":"","what":"pm2","title":"Hosting","text":"don’t luxury running Plumber instance designated server (discussed DigitalOcean section) ’re comfortable hosting API Docker, ’ll need find way run manage Plumber APIs server directly. variety tools built help manage web hosting single-threaded environment like R. compelling tools developed around Ruby (like Phusion Passenger) Node.js (like Node Supervisor, forever pm2). Thankfully, many tools can adapted support managing R process running Plumber API. pm2 process manager initially targeting Node.js. ’ll show commands needed Ubuntu 14.04, can use Operating System distribution supported pm2. end, ’ll server automatically starts plumber services booted, restarts ever crash, even centralizes logs plumber services.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"server-deployment-and-preparation","dir":"Articles","previous_headings":"pm2","what":"Server Deployment and Preparation","title":"Hosting","text":"first thing ’ll need , regardless process manager choose, deploy R files containing plumber applications server ’ll hosted. Keep mind ’ll also need include supplemental R files source()d plumber file, datasets dependencies files . ’ll also need make sure R packages need (appropriate versions) available remote server. can either manually installing packages can consider using tool like Packrat help . myriad features pm2 won’t cover . good idea spend time reading documentation see features might interest ensure understand implications pm2 hosts services (user want run processes , etc.). quick-start guide may especially relevant. sake simplicity, basic installation without customizing many options.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"install-pm2","dir":"Articles","previous_headings":"pm2","what":"Install pm2","title":"Hosting","text":"Now ’re ready install pm2. pm2 package ’s maintained npm (Node.js’s package management system); also requires Node.js order run. start ’ll want install Node.js. Ubuntu 14.04, necessary commands : npm Node.js installed, ’re ready install pm2. find errors like SSL Error: CERT_UNTRUSTED using npm command, can bypass ssl error using: set registry URL https:// http://: install pm2 globally (-g) server, meaning now able run pm2 --version get version number pm2 ’ve installed. order get pm2 startup services boot, run sudo pm2 startup create necessary files system run pm2 boot machine.","code":"sudo apt-get update sudo apt-get install nodejs npm sudo npm install -g pm2 npm config set strict-ssl false npm config set registry=\"http://registry.npmjs.org/\""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"wrap-your-plumber-file","dir":"Articles","previous_headings":"pm2","what":"Wrap Your Plumber File","title":"Hosting","text":"’ve deployed Plumber files onto server, ’ll still need tell server run server. ’re probably used running commands like Unfortunately, pm2 doesn’t understand R scripts natively; however, possible specify custom interpreter. can use feature launch R-based wrapper plumber file using Rscript scripting front-end comes R. following script run two commands listed . Save R script server something like run-myfile.R. also make executable changing permissions file using command like chmod 755 run-myfile.R. now execute file make sure runs service like expect. able make requests server appropriate port plumber service respond. can kill process using Ctrl-c ’re convinced ’s working. Make sure shell script permanent location won’t erased modified accidentally. can consider creating designated directory plumber services directory like /usr/local/plumber, put services associated Rscript-runners subdirectory like /usr/local/plumber/myfile/.","code":"pr(\"myfile.R\") %>% pr_run(port=4500) #!/usr/bin/env Rscript  library(plumber) pr(\"myfile.R\") %>%   pr_run(port=4000, host=\"0.0.0.0\") # Setting the host option on a VM instance ensures the application can be accessed externally. # (This may be only true for Linux users.)"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"introduce-our-service-to-pm2","dir":"Articles","previous_headings":"pm2","what":"Introduce Our Service to pm2","title":"Hosting","text":"’ll now need teach pm2 Plumber API can put work. can register configure number services pm2; let’s start myfile Plumber service. can use pm2 list command see services pm2 already running. run command now, ’ll see pm2 doesn’t services ’s charge . scripts code stored directory want , use following command tell pm2 service. see output pm2 starting instance service, followed status information pm2. everything worked properly, ’ll see new service registered running. can see output executing pm2 list . ’re happy pm2 services defined, can use pm2 save tell pm2 retain set services running next time boot machine. services defined automatically restarted . point, persistent pm2 service created Plumber application. means can reboot server, find kill underlying R process plumber application using pm2 automatically bring new process replace . help guarantee always Plumber process running port number specified shell script. good idea reboot server ensure everything comes back way expected. can repeat process plumber applications want deploy, long give unique port run . Remember can’t one service running single port. sure pm2 save every time add services want survive restart. Run netstat -tulpn see application ran. see application host 127.0.0.0 127.0.0.1, application accessed externally. change host parameter 0.0.0.0, example: `pr_run(host = “0.0.0.0”).","code":"pm2 start --interpreter=\"Rscript\" /usr/local/plumber/myfile/run-myfile.R"},{"path":"https://www.rplumber.io/articles/hosting.html","id":"logs-and-management","dir":"Articles","previous_headings":"pm2","what":"Logs and Management","title":"Hosting","text":"Now applications defined pm2, may want drill manage debug . want see information, use pm2 show command specify name application pm2 list. usually name shell script specified, may something like pm2 show run-myfile. can peruse information keep eye restarts count applications. application restart many times, implies process crashing often, sign ’s problem code. Thankfully, pm2 automatically manages log files underlying processes. ever need check log files service, can just run pm2 logs run-myfile, myfile name service obtained pm2 list. command show last lines logged process, begin streaming incoming log lines exit (Ctrl-c). want big-picture view health server pm2 services, can run pm2 monit show dashboard RAM CPU usage services.","code":""},{"path":"https://www.rplumber.io/articles/hosting.html","id":"systemd","dir":"Articles","previous_headings":"","what":"systemd","title":"Hosting","text":"systemd service manager used certain Linux distributions including RedHat/CentOS 7, SUSE 12, Ubuntu versions 16.04 later. use Linux server can use systemd run Plumber service can accessed local network even outside network depending firewall rules. option similar using Docker method. One main advantages using systemd using Docker systemd won’t bypass firewall rules (Docker !) avoids overhead running container. Compared plumber::do_provision() option won’t create new droplet use DigitalOcean; run existing droplet instead. implement option ’ll complete following three steps terminal: Verify plumber package available globally server: Run sudo nano /etc/systemd/system/plumber-api.service, paste adapt content: Activate service (auto-start power/reboot) start : check API running, type systemctl | grep running terminal display plumber-api.service \\ loaded active running Plumber API.","code":"R -e 'install.packages(\"plumber\", repos = \"https://cran.rstudio.com/\")' [Unit] Description=Plumber API # After=postgresql # (or mariadb, mysql, etc if you use a DB with Plumber, otherwise leave this commented)  [Service] ExecStart=/usr/bin/Rscript -e \"library(plumber); pr('/your-dir/your-api-script.R') %>% pr_run(port=8080, host='0.0.0.0')\" Restart=on-abnormal WorkingDirectory=/your-dir/  [Install] WantedBy=multi-user.target sudo systemctl enable plumber-api  # automatically start the service when the server boots sudo systemctl start plumber-api   # start the service right now"},{"path":"https://www.rplumber.io/articles/introduction.html","id":"web-apis","dir":"Articles","previous_headings":"","what":"Web APIs","title":"Introduction","text":"Hypertext Transfer Protocol (HTTP) dominant medium information exchanged Internet. Application Programming Interface (API) broad term defines rules guide interaction software. case HTTP APIs, defined set endpoints accept particular inputs. Plumber translates annotations place functions HTTP API can called machines network. execute Plumber API public server, can even make API available public Internet. HTTP APIs become predominant language software communicates. creating HTTP API, ’ll empower R code leveraged services – whether ’re housed inside organization hosted side world. just ideas doors opened wrap R code Plumber API: Software written languages organization can run R code. company’s Java application now pull custom ggplot2 graph generate -demand, Python client query predictive model defined R. can third-party receive emails behalf notify Plumber service new messages arrive. register “Slash Command” Slack, enabling execute R function response command entered Slack. can write JavaScript code queries Plumber API visitor’s web browser. Even , use Plumber exclusively back-end interactive web application.","code":""},{"path":"https://www.rplumber.io/articles/migration.html","id":"plumber-0-4-0-migration-guide","dir":"Articles","previous_headings":"","what":"Plumber 0.4.0 Migration Guide","title":"Migration Guide","text":"Plumber underwent series breaking changes part 0.4.0 release. changes made attempt rectify earlier mistakes attempt take care foreseeable breaking changes Plumber package. number changes users consider preparing upgrade plumber 0.4.0. Plumber longer accepts external connections default. host parameter run() method now defaults 127.0.0.1, meaning Plumber listen incoming requests local machine ’s running – machine network. done security reasons don’t accidentally expose Plumber API ’re developing entire network. restore old behavior Plumber listened connections machine network, use $run(host=\"0.0.0.0\"). Note ’re deploying environment includes HTTP proxy (DigitalOcean servers use nginx), Plumber listen 127.0.0.1 likely right default, proxy – Plumber – one receiving external connections. Plumber longer sets Access-Control-Allow-Origin HTTP header *. previously done convenience given security implications ’re reversing decision. previous behavior allowed web browsers make requests API domains using JavaScript request used standard HTTP headers GET, HEAD, POST request. requests longer work default. wish allow endpoint accessible origins web browser, can use res$setHeader(\"Access-Control-Allow-Origin\", \"*\") endpoint filter. Rather setting default port 8000, port now randomly selected. ensures shared server (like RStudio Server) able support multiple people developing Plumber APIs concurrently without manually identify available port. can controlled specifying port parameter run() method setting plumber.port option. object-oriented model Plumber routers changed. ’re calling following methods Plumber router, need modify code use newer alternatives: addFilter, addEndpoint, addGlobalProcessor, addAssets. code around functions undergone major rewrite breaking changes introduced. four functions still supported deprecation warning 0.4.0, support best-effort. Certain parameters methods longer supported, thoroughly test Plumber API leverages methods deploying version 0.4.0. Updated documentation using Plumber programmatically now available.","code":""},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"creating-and-controlling-a-router","dir":"Articles","previous_headings":"","what":"Creating and Controlling a Router","title":"Programmatic Usage","text":"centerpiece Plumber router. Plumber routers responsible coordinating incoming requests httpuv, dispatching requests appropriate filters/endpoints, serializing response, handling errors might pop along way. ’ve using annotations define Plumber APIs, ’ve already worked Plumber routers ’s plumb() command produces. instantiate new Plumber router programmatically, can call pr(). return blank Plumber router endpoints. call pr_run() returned object start API, doesn’t know respond requests incoming traffic get 404 response. ’ll see momentarily add endpoints filters onto empty router. Alternatively, can pass file contains annotation-based Plumber API first parameter create router much like plumb(). aware Plumber routers come handful filters pre-configured. built-filters used things like process properties incoming request like cookies, POST body, query string. can specify filters want new router overriding filters parameter creating new router.","code":""},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"defining-endpoints","dir":"Articles","previous_headings":"","what":"Defining Endpoints","title":"Programmatic Usage","text":"can define endpoints router using pr_handle(), pr_get(), pr_post(). instance, define Plumber API response GET requests / POST requests /submit, use following code: “handler” functions define calls identical code defined plumber.R file using annotations define API. route methods take additional arguments allow control nuanced behavior endpoint like filter might preempt serializer use. instance, following endpoint use Plumber’s HTML serializer.","code":"pr() %>%   pr_get(\"/\", function(req, res){     # ...   }) %>%   pr_post(\"/submit\", function(req, res){     # ...   }) pr() %>%   pr_get(\"/\", function(){     \"<html><h1>Programmatic Plumber!<\/h1><\/html>\"   }, serializer = plumber::serializer_html())"},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"defining-filters","dir":"Articles","previous_headings":"","what":"Defining Filters","title":"Programmatic Usage","text":"Use filter() method Plumber router define new filter: can specify options serializer use filter returns value pr_filter() method, well.","code":"pr() %>%   pr_filter(\"myFilter\", function(req){     req$filtered <- TRUE     forward()   }) %>%   pr_get(\"/\", function(req){     paste(\"Am I filtered?\", req$filtered)   })"},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"router-hooks","dir":"Articles","previous_headings":"","what":"Registering Hooks on a Router","title":"Programmatic Usage","text":"Plumber routers support notion “hooks” can registered execute code particular point lifecycle request. Plumber routers currently support four hooks: preroute(data, req, res) postroute(data, req, res, value) preserialize(data, req, res, value) postserialize(data, req, res, value) access disposable environment data parameter created temporary data store request. Hooks can store temporary data hooks can reused hooks processing request. One feature defining hooks Plumber routers ability modify returned value. convention hooks : function accepts parameter named value expected return new value. unmodified version value passed , mutated value. either case, hook accepts parameter named value, whatever hook returns used new value response. can add hooks using pr_hook method, can add multiple hooks using pr_hooks method takes name list names names hooks, values handlers . Making GET request / print various information three events registered hooks.","code":"pr() %>%   pr_hook(\"preroute\", function(req) {     cat(\"Routing a request for\", req$PATH_INFO, \"...\\n\")   }) %>%   pr_hooks(list(     preserialize = function(req, value) {       print(\"About to serialize this value:\")       print(value)        # Must return the value since we took one in. Here we're not choosing       # to mutate it, but we could.       value     },     postserialize = function(res) {       print(\"We serialized the value as:\")       print(res$body)     }   )) %>%   pr_get(\"/\", function(){ 123 })"},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"mount-static","dir":"Articles","previous_headings":"","what":"Mounting & Static File Routers","title":"Programmatic Usage","text":"Plumber routers can “nested” mounting one another using mount() method. allows compartmentalize API paths great technique decomposing large APIs smaller files. approach used defining routers serve directory static files. Static file routers just special case Plumber routers created using pr_static(). example make files directories stored ./myfiles directory available API /assets/ path.","code":"root <- pr()  users <- pr(\"users.R\") products <- pr(\"products.R\")  root %>%   pr_mount(\"/users\", users) %>%   pr_mount(\"/products\", products)  root pr() %>%   pr_static(\"/assets\", \"./myfiles\") %>%   pr_run()"},{"path":"https://www.rplumber.io/articles/programmatic-usage.html","id":"customize-router","dir":"Articles","previous_headings":"","what":"Customizing a Router","title":"Programmatic Usage","text":"handful useful methods aware modify behavior router. Using hooks alter request processing already discussed, additionally can modify router’s behavior using following: pr_set_serializer() - Sets default serializer router. pr_set_error() - Sets error handler gets invoked filter endpoint generates error. pr_set_404() - Sets handler gets called incoming request can’t served filter, endpoint, sub-router.","code":""},{"path":"https://www.rplumber.io/articles/quickstart.html","id":"specifying-the-inputs","dir":"Articles","previous_headings":"","what":"Specifying the Inputs","title":"Quickstart","text":"may noticed functions define endpoints accept parameters. parameters allow us customize behavior endpoints. One ways using “query strings” way passing parameters HTTP API. visit http://localhost:8000/plot?spec=setosa, see similar graph one saw , now dataset filtered include “setosa” species iris dataset.  might guessed, spec=setosa portion URL sets spec parameter setosa. details Plumber processes inputs available Routing & Input article.","code":""},{"path":"https://www.rplumber.io/articles/quickstart.html","id":"customizing-the-output","dir":"Articles","previous_headings":"","what":"Customizing The Output","title":"Quickstart","text":"previous example, saw one endpoint rendered JSON one produced image. Unless instructed otherwise, Plumber attempt render whatever endpoint function returns JSON. However, can specify alternative “serializers” instruct Plumber render output format HTML (@serializer html), PNG (@serializer png), JPEG (@serializer jpeg). endpoint produce something like following, visited. also sets appropriate Content-Type header browser visits page know render result HTML. can even provide custom serializers define translate R object produced endpoint bits produce Plumber’s HTTP response. can find details Rendering & Output article.","code":"#* @get /hello #* @serializer html function(){   \"<html><h1>hello world<\/h1><\/html>\" } <html><h1>hello world<\/h1><\/html>"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"response-object","dir":"Articles","previous_headings":"","what":"The Response Object","title":"Rendering Output","text":"plumber response object stored environment, much like request object. response object, accessible res within plumber functions, contains following objects: response object also contains following methods can invoked: methods (clone, initialize, serializer) directly invoked response object.","code":""},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"serializers","dir":"Articles","previous_headings":"","what":"Serializers","title":"Rendering Output","text":"order send response R API client, object must “serialized” format client can understand. JavaScript Object Notation (JSON) one standard commonly used web APIs. JSON serialization translates R objects like list(=123, b=\"hi!\") JSON text resembling {: 123, b: \"hi!\"}. JSON appropriate every situation, however. want API render HTML page might viewed browser, instance, need different serializer. Likewise, want return image rendered R, likely want use standard image format like PNG JPEG rather JSON. default, Plumber serializes objects JSON via jsonlite R package. However, variety serializers built package. can also pass arguments certain serializers modify behavior like example . See Serialization article details.","code":"#* @serializer json list(na=\"string\")"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"boxed-vs-unboxed-json","dir":"Articles","previous_headings":"Serializers","what":"Boxed vs Unboxed JSON","title":"Rendering Output","text":"may noticed API responses generated Plumber render singular values (“scalars”) arrays. instance: value element, though ’s singular, still rendered array. may surprise initially, done keep output consistent. JSON differentiates scalar vector objects, R . creates ambiguity serializing R object JSON since unclear whether particular element rendered atomic value JSON array. Consider following API returns letters lexicographically “higher” given letter. example API , instance, produces scalar, instances produces vector. Visiting http://localhost:8000/boxed?letter=U http://localhost:8000/unboxed?letter=U return identical responses: However, http://localhost:8000/boxed?letter=Y produce: http://localhost:8000/unboxed?letter=Y produce: /boxed endpoint, name implies, produces “boxed” JSON output length-1 vectors still rendered array. Conversely, /unboxed endpoint sets auto_unbox=TRUE call jsonlite::toJSON, causing length-1 R vectors rendered JSON scalars. R doesn’t distinguish scalars vectors, API clients may respond differently encountering JSON array versus atomic value. may find API clients respond gracefully object expected vector becomes scalar one call. reason, Plumber inherits jsonlite::toJSON default setting auto_unbox=FALSE result length-1 vectors still rendered JSON arrays. can configure endpoint use unboxedJSON serializer (shown ) want alter behavior particular endpoint. couple functions aware around feature set. using boxed JSON serialization, jsonlite::unbox() can used force length-1 object R presented JSON scalar. using unboxed JSON serialization, () cause length-1 R object present JSON array.","code":"jsonlite::toJSON(list(a=5)) #> {\"a\":[5]} #* Get letters after a given letter #* @get /boxed function(letter=\"A\"){   LETTERS[LETTERS > letter] }  #* Get letters after a given letter #* @serializer unboxedJSON #* @get /unboxed function(letter=\"A\"){   LETTERS[LETTERS > letter] } [\"V\", \"W\", \"X\", \"Y\", \"Z\"] [\"Z\"] \"Z\""},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"customizing-image-serializers","dir":"Articles","previous_headings":"Serializers","what":"Customizing Image Serializers","title":"Rendering Output","text":"@serializer jpeg @serializer png annotations cause graphical output endpoint written file returned client using jpeg() png() functions, respectively. functions accept variety additional options customize output including width, height, bg among others. version 0.4.3 plumber, annotations now accept additional arguments passed functions. enables creation endpoints like: lower level, arguments inside parentheses used arguments list() call. Meaning R code can prefixed list form valid R expression can used. example, #' @serializer png (width=2^10 + 1) valid annotation. code evaluated API plumb()d. approach can used statically define size image, work dynamic sizing image. wish dynamically size images, need render capture graphical output return contents appropriate Content-Type header. See existing image renderers model .","code":"#* Example of customizing graphical output #* @serializer png list(width = 400, height = 500) #* @get / function(){   plot(1:10) }"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"bypassing-serialization","dir":"Articles","previous_headings":"Serializers","what":"Bypassing Serialization","title":"Rendering Output","text":"instances may desirable return value directly R without serialization. can bypass serialization returning response object endpoint. example, consider following API. response returned endpoint contain body Literal text ! Content-Type header without additional serialization. Similarly, can leverage @serializer contentType annotation serialization response specifies contentType header. can use annotation want control response send. Running API visiting http://localhost:8000/pdf download PDF generated R (display PDF natively, client supports ).","code":"#* Endpoint that bypasses serialization #* @get / function(res){   res$body <- \"Literal text here!\"    res } #* @serializer contentType list(type=\"application/pdf\") #* @get /pdf function(){   tmp <- tempfile()   pdf(tmp)   plot(1:10, type=\"b\")   text(4, 8, \"PDF from plumber!\")   text(6, 2, paste(\"The time is\", Sys.time()))   dev.off()    readBin(tmp, \"raw\", n=file.info(tmp)$size) }"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"error-handling","dir":"Articles","previous_headings":"","what":"Error Handling","title":"Rendering Output","text":"Plumber wraps endpoint invocation can gracefully capture errors. run API interactive mode visit http://localhost:8000/simple, ’ll notice two things: HTTP response status code 500 (“internal server error”) sent client. see error message resembling: {\"error\":[\"500 - Internal server error\"],\"message\":[\"Error (function () : error!\\n\"]} similar error printed terminal ’re running Plumber API. means possible intentionally stop() endpoint filter way communicate problem user. However, may preferable render errors API consistent format helpful error messages. custom error handler can set using setErrorHandler() method: run API visit http://localhost:8000/simple, ’ll notice custom error message provided error handler included browser. Since didn’t anything actual error message, nothing printed console. wanted include error console, following: function passed setErrorHandler invoked anytime R execution fails error.","code":"#* Example of throwing an error #* @get /simple function(){   stop(\"I'm an error!\") }  #* Generate a friendly error #* @get /friendly function(res){   msg <- \"Your request did not include a required parameter.\"   res$status <- 400 # Bad request   list(error=jsonlite::unbox(msg)) } {   \"error\": \"Your request did not include a required parameter.\" } pr() %>%   pr_get(\"/simple\", function() stop(\"I'm an error!\")) %>%   pr_set_error(function(req, res, err){     res$status <- 500     list(error = \"An error occurred. Please contact your administrator.\")   }) %>%   pr_run() pr() %>%   pr_get(\"/simple\", function() stop(\"I'm an error!\")) %>%   pr_set_error(function(req, res, err){     print(err)     res$status <- 500     list(error = \"An error occurred. Please contact your administrator.\")   }) %>%   pr_run()"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"setting-cookies","dir":"Articles","previous_headings":"","what":"Setting Cookies","title":"Rendering Output","text":"part fulfilling request, Plumber API can choose set HTTP cookies client. HTTP APIs don’t implicitly contain notion “session.” Without additional information, Plumber way ascertaining whether two HTTP requests come associated user. Cookies offer way commission client store state behalf selected data can outlive single HTTP request; full implications using cookies track state API discussed . two forms Plumber cookies – plain-text encrypted – discussed following sections. make cookies important part API’s security model, sure understand section security considerations working cookies.","code":""},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"setting-unencrypted-cookies","dir":"Articles","previous_headings":"Setting Cookies","what":"Setting Unencrypted Cookies","title":"Rendering Output","text":"Plumber can set receive plaint-text cookies. API endpoint return random letter, remembers preferences whether like capitalized lower-case letters. Since API using PUT request test API, ’ll use curl command line test . (’s nothing cookies necessitates PUT requests; just easily modify API use GET request.) can start visiting /letter endpoint ’ll see API defaults lower-case alphabet. curl http://localhost:8000/letter send PUT request specify capital parameter, cookie set client allow server accommodate preference future requests. curl, need specify file want save cookies using -c option. good reminder clients handle cookies differently – won’t support – sure clients intend support API play nicely cookies want use . send PUT request, setting parameter capital 1, invoke: curl -c cookies.txt -X PUT --data 'capital=1' \"http://localhost:8000/preferences\". print cookies.txt file, now see contains single cookie called capitalize value 1. can make another GET request /letter see accommodates preferences. ’ll need tell curl use cookies file just created sending request using -b switch: curl -b cookies.txt http://localhost:8000/letter. now see API returning random capitalized letter. setCookie method accepts variety additional options customize cookie handled client. default, cookies set session lifetime, meaning cookie persist user’s browser client closes tab point cookie deleted. can customize setting expiration parameter setCookie using either number seconds future cookie expire. Alternatively, can provide object class POSIXt, case interpreted time cookie expire. options can set cookie include path (path domain cookie installed client); http (controls whether cookie accessible JavaScript running domain – TRUE means cookie HTTP-, accessible JavaScript); secure (TRUE, instructs browser send cookie HTTPS, insecure HTTP. ’re using cookies infer security-sensitive properties (identify user, determine resources client access ), sure see Security article – particular section security implications cookies.","code":"#* @put /preferences function(res, capital){   if (missing(capital)){     stop(\"You must specify a value for the 'capital' preference.\")   }   res$setCookie(\"capitalize\", capital) }  #* @get /letter function(req) {   capitalize <- req$cookies$capitalize    # Default to lower-case unless user preference is capitalized   alphabet <- letters    # The capitalize cookie will initially be empty (NULL)   if (!is.null(capitalize) && capitalize == \"1\"){     alphabet <- LETTERS   }    list(     letter = sample(alphabet, 1)   ) } {   \"letter\": [\"m\"] }"},{"path":"https://www.rplumber.io/articles/rendering-output.html","id":"encrypted-cookies","dir":"Articles","previous_headings":"Setting Cookies","what":"Setting Encrypted Cookies","title":"Rendering Output","text":"addition storing plain-text cookies, Plumber also supports handling cookies encrypted. Encrypted cookies prevent users seeing stored inside also sign contents users can’t modify stored. use feature, must explicitly add router constructing . example, run following sequence commands create router supports encrypted session cookies. ’ll notice example using session_cookie hooks come Plumber. adding registering hooks router, ’ll ensure req$session object made available incoming requests persisted cookie named cookieName response ready sent user. example, key used encrypt data \"mySecretHere\", obviously weak secret key. Unlike res$setHeader(), values attached req$session serialized via jsonlite; ’re free use complex data structures like lists session. Also unlike res$setHeaders(), req$session encrypts data using secret key provide first argument session_cookie() function. example, ’ll store encrypted cookie counts many times client visited particular endpoint: , need register session_cookie() hooks router code work. inspect cookie set browser, ’ll find value encrypted time gets client. time arrives Plumber, cookie available regular R list can read modified.","code":"pr(\"myfile.R\") %>%   pr_cookie(\"mySecretHere\", \"cookieName\") %>%   pr_run() #* @get /sessionCounter function(req){   count <- 0   if (!is.null(req$session$counter)){     count <- as.numeric(req$session$counter)   }   req$session$counter <- count + 1   return(paste0(\"This is visit #\", count)) }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"endpoints","dir":"Articles","previous_headings":"","what":"Endpoints","title":"Routing & Input","text":"Endpoints terminal step process serving request. endpoint can simply viewed logic ultimately responsible generating response particular request. request checked available endpoint finds endpoint willing serve point stops looking; .e. request ever processed one endpoint. create endpoint annotating function like : annotation specifies function responsible generating response GET request /hello. value returned function used response request (run serializer e.g. convert response JSON). case, GET response /hello return content [\"hello world\"] JSON Content-Type. annotations generate endpoint include: @get @post @put @delete @head map HTTP methods API client might send along request. default open page web browser, sends GET request API. can use API clients (even JavaScript inside web browser) form HTTP requests using methods listed . conventions around methods used can read . Note conventions carry security implications, ’s good idea follow recommended uses method fully understand might deviate . Note single endpoint can support multiple verbs. following function used service incoming GET, POST, PUT request /cars.","code":"#* Return \"hello world\" #* @get /hello function(){   \"hello world\" } #* @get /cars #* @post /cars #* @put /cars function(){   ... }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"Routing & Input","text":"Plumber filters can used define “pipeline” handling incoming requests. allows API authors break complex logic sequence independent, understandable steps. Unlike endpoints, request may go multiple Plumber filters response generated. Typically, Plumber router pass request defined filters attempts find endpoint satisfy request. However, endpoints can “preempt” particular filters want considered execution filter(s) registered router. Filters can one three things handling request: Forward control onto next handler, potentially mutating request. Return response forward subsequent handlers Throw error three options, might desired, discussed .","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"forward-to-another-handler","dir":"Articles","previous_headings":"Filters","what":"Forward to Another Handler","title":"Routing & Input","text":"common behavior filter pass request next handler mutating incoming request invoking external side-effect. One common use case use filter request logger: filter straightforward: invokes external action (logging) calls forward() pass control next handler pipeline (another filter endpoint). req res parameters Plumber based R environments, exhibit “pass--reference” behavior. means changes made one filter req res object visible filters endpoints also touching request response. similar filter may mutate state request response object ’s given. case, req object going extended additional property named username represents value looked cookie. req$username property available subsequent filters endpoints processing request. (Note example secure system authentication; see section using cookies store state longer discussion .) modified request object, passes control next handler using forward().","code":"#* Log some information about the incoming request #* @filter logger function(req){   cat(as.character(Sys.time()), \"-\",     req$REQUEST_METHOD, req$PATH_INFO, \"-\",     req$HTTP_USER_AGENT, \"@\", req$REMOTE_ADDR, \"\\n\")   plumber::forward() } #* @filter setuser function(req){   un <- req$cookies$user   # Make req$username available to endpoints   req$username <- un    plumber::forward() }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"return-a-response","dir":"Articles","previous_headings":"Filters","what":"Return a Response","title":"Routing & Input","text":"also possible filters return response. may want check request satisfies constraint (like authentication) – certain cases – return response without invoking additional handlers. example, filter used check user authenticated. common cause errors Plumber APIs forgetting invoke forward() filters. filter, result last line silently returned response incoming request. can cause API exhibit odd behavior depending ’s returned. ’re using filters, sure carefully audit code paths ensure ’re either calling forward(), causing error, intentionally returning value.","code":"#* @filter checkAuth function(req, res){   if (is.null(req$username)){     res$status <- 401 # Unauthorized     return(list(error=\"Authentication required\"))   } else {     plumber::forward()   } }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"throw-an-error","dir":"Articles","previous_headings":"Filters","what":"Throw an Error","title":"Routing & Input","text":"Finally, filter can throw error. can occur mistake made code defining filter filter intentionally invokes stop() trigger error. case, request processed subsequent handlers immediately sent router’s error handler. See router customization details customize error handler.","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"dynamic-routes","dir":"Articles","previous_headings":"","what":"Dynamic Routes","title":"Routing & Input","text":"addition hard-coded routes like /hello, Plumber endpoints can dynamic routes. Dynamic routes allow endpoints define flexible set paths match. common REST convention include identifier object API paths associated . lookup information user #13, might make GET request path /users/13. Rather register routes every user API might possibly encounter, can use dynamic route associate endpoint variety paths. API uses dynamic path /users/<id> match request form /users/ followed path element like number letters. case, return information user user associated ID found, empty object . can name dynamic path elements however ’d like, note name used dynamic path must match name parameter function (case, id). can even complex dynamic routes like: hard-coded dynamic examples given , parameters provided function character string.","code":"users <- data.frame(   uid=c(12,13),   username=c(\"kim\", \"john\") )  #* Lookup a user #* @get /users/<id> function(id){   subset(users, uid %in% id) } #* @get /user/<from>/connect/<to> function(from, to){   # Do something with the `from` and `to` variables... }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"typed-dynamic-routes","dir":"Articles","previous_headings":"","what":"Typed Dynamic Routes","title":"Routing & Input","text":"Unless otherwise instructed, parameters passed plumber endpoints query strings dynamic paths character strings. example, consider following API. Visiting http://localhost:8000/types/14 return: intend support particular data type particular parameter dynamic route, can specify desired type route . Specifying type dynamic path element also narrow paths match endpoint. instance, path /users/123 match first endpoint, /users/8e3k , since 8e3k integer. following details mapping type names can use dynamic types map R data types.","code":"#* @get /type/<id> function(id){   list(     id = id,     type = typeof(id)   ) } {   \"id\": [\"14\"],   \"type\": [\"character\"] } #* @get /user/<id:int> function(id){   next <- id + 1   # ... }  #* @post /user/activated/<active:bool> function(active){   if (!active){     # ...   } }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"static-file-handler","dir":"Articles","previous_headings":"","what":"Static File Handler","title":"Routing & Input","text":"Plumber includes static file server can used host directories static assets JavaScript, CSS, HTML files. servers fairly simple configure integrate plumber application. example expose local directory ./files/static default /public path server. file ./files/static/branding.html, available Plumber server /public/branding.html. can optionally provide additional argument configure public path used server. instance expose local directory files/static /public, /static. Likewise, serve main index.html, can also map /files/static / using enables serve /files/static/index.html http://localhost:8000/ root URL. “implementation” server examples just empty list(). can also specify function() like plumber annotations. point, implementation doesn’t alter behavior static server. Eventually, list function may provide opportunity configure server changing things like cache control settings. ’re configuring Plumber router programmatically, can instantiate special static file router mount onto another router discussed static file router section.","code":"#* @assets ./files/static list() #* @assets ./files/static /static list() #* @assets ./files/static / list()"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"input-handling","dir":"Articles","previous_headings":"","what":"Input Handling","title":"Routing & Input","text":"Plumber routes requests based exclusively path method incoming HTTP request, requests can contain much information just . might include additional HTTP headers, query string, request body. fields may viewed “inputs” Plumber API.","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"the-request-object","dir":"Articles","previous_headings":"Input Handling","what":"The Request Object","title":"Routing & Input","text":"HTTP requests Plumber stored environments satisfy Rook interface. expected objects HTTP requests following.","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"query-strings","dir":"Articles","previous_headings":"Input Handling","what":"Query Strings","title":"Routing & Input","text":"query string may appended URL order convey additional information beyond just request route. Query strings allow encoding character string keys values. example, URL https://duckduckgo.com/?q=bread&pretty=1, everything following ? constitutes query string. case, two variables (q pretty) set (bread 1, respectively). Plumber automatically forward information query string function executed aligning name query string name function parameter. following example defines search API mimics example DuckDuckGo merely prints receives. Visiting http://localhost:8000/?q=bread&pretty=1 print: equivalent calling search(q=\"bread\", pretty=\"1\"). parameter specified query string, just omitted invocation endpoint. example http://localhost:8000/?q=cereal equivalent search(q=\"cereal\"). function fall back default value pretty parameter (0), since defined function signature. Including additional query string arguments map parameter function effect. instance http://localhost:8000/?test=123 return results calling search(). (Note raw query string available req$QUERY_STRING.) web browsers impose limitations length URL. Internet Explorer, particular, caps query string 2,048 characters. need send large amounts data client API, likely better idea send request body.","code":"#* @get / search <- function(q=\"\", pretty=0){   paste0(\"The q parameter is '\", q, \"'. \",          \"The pretty parameter is '\", pretty, \"'.\") } [\"The q parameter is 'bread'. The pretty parameter is '1'.\"] [\"The q parameter is 'cereal'. The pretty parameter is '0'.\"] [\"The q parameter is ''. The pretty parameter is '0'.\"]"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"request-body","dir":"Articles","previous_headings":"Input Handling","what":"Request Body","title":"Routing & Input","text":"Another way provide additional information inside HTTP request using message body. Effectively, client specifies metadata request (path ’s trying reach, HTTP headers, etc.) can provide message body. maximum size request body depends largely technologies involved (client, proxies, etc.) typically least 2MB – much larger query string. approach commonly seen PUT POST requests, though encounter HTTP methods. Plumber attempt parse request body one using allowed parsers. fields provided message body passed parameters function.","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"files-handling-note","dir":"Articles","previous_headings":"Input Handling > Request Body","what":"Files handling note","title":"Routing & Input","text":"dealing binary parameters, Plumber return named list raw vector. names list original uploaded filenames. Raw values binary content file. Unfortunately, crafting request message body requires bit work making GET request query string web browser, can use tools like curl command line httr2 R package. ’ll use curl examples . Running curl --data \"id=123&name=Jennifer\" \"http://localhost:8000/user\" return: Alternatively, echo {\"id\":123, \"name\": \"Jennifer\"} > call.json & curl --data @call.json \"http://localhost:8000/user\" -H \"content-type: application/json\" (formatting body JSON) effect. demonstrated , raw request body made available req$bodyRaw parsed request body available req$body.","code":"#* @post /user function(req, id, name) {   list(     id = id,     name = name,     body = req$body,     raw = req$bodyRaw   ) } {   \"id\": [123],   \"name\": [\"Jennifer\"],   \"body\": {     \"id\": [123],     \"name\": [\"Jennifer\"]   },   \"raw\": [\"aWQ9MTIzJm5hbWU9SmVubmlmZXI=\"] }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"named-parameters-collision-note","dir":"Articles","previous_headings":"Input Handling > Request Body","what":"Named parameters collision note","title":"Routing & Input","text":"first matched formal arguments passed automatically endpoint execution. Duplicates dropped. Query parameters priority path parameters, finally, body parameters matched last. required, recommended endpoints function definition accepts formals req, res, ... avoid duplicates. endpoint arguments processed like list, available req$argsBody, arguments req$args. req$args combination list(req = req, res = res), req$argsPath, req$argsBody, req$argsQuery.","code":"function(req[, res, ...]) {   ...   req$argsQuery   req$argsPath   req$argsBody   ... }"},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"read-cookies","dir":"Articles","previous_headings":"Input Handling","what":"Cookies","title":"Routing & Input","text":"cookies attached incoming request, ’ll made available via req$cookies. contain list cookies included request. names list correspond names cookies value element character string. See Setting Cookies section details set cookies Plumber. ’ve set encrypted cookies (discussed Encrypted Cookies section), session decrypted made available req$session.","code":""},{"path":"https://www.rplumber.io/articles/routing-and-input.html","id":"headers","dir":"Articles","previous_headings":"Input Handling","what":"Headers","title":"Routing & Input","text":"HTTP headers attached incoming request attached request object. prefixed HTTP_, name header capitalized, hyphens substituted underscores. e.g. Content-Type HTTP header can found req$HTTP_CONTENT_TYPE. Running curl --header \"customheader: abc123\" http://localhost:8000 return: can print names properties attached request running print(ls(req)) inside endpoint.","code":"#* Return the value of a custom header #* @get / function(req){   list(     val = req$HTTP_CUSTOMHEADER   ) } {   \"val\": [\"abc123\"] }"},{"path":"https://www.rplumber.io/articles/security.html","id":"networking","dir":"Articles","previous_headings":"","what":"Networking & Firewalls","title":"Security","text":"networking standpoint, two fundamentally different approaches developing R code. can develop locally using tool like RStudio Desktop. case, R session (Plumber APIs run()) housed local machine. can develop remote machine using tool like RStudio Server. , R session running remote server accessed across network. first case, ’s typically little consider networking perspective. APIs accessible http://127.0.0.1:8000 default (localhost synonymous local IP address 127.0.0.1) likely won’t need concern firewalls network proxies. second case, however, may need consider network environment server running API. considerations ’ll need make hosting API server production use. particular, investigate whether firewalls server hosting Plumber API clients want able connect. Firewalls way block undesired network traffic. desktop computers many servers come firewalls enabled ---box. means want expose API running port 8000, need configure firewall accept incoming connections port. Firewalls can also configured network intermediaries, may need configure multiple firewalls allow traffic order expose desired port API clients.","code":""},{"path":"https://www.rplumber.io/articles/security.html","id":"https","dir":"Articles","previous_headings":"","what":"HTTPS","title":"Security","text":"HTTPS secure form HTTP. Many people now aware check browser displays padlock associated HTTPS enter sensitive information like credit card number. HTTPS important consider developing Plumber APIs, well. HTTPS primarily offers two protections: encrypts information sent API client Plumber process using TLS (often still referred predecessor, “SSL”). prevents others network able read information sent back forth. gives API client confidence ’s communicating Plumber process, opposed imposter. two assurances critical API handling sensitive data performing actions intended authenticated users. hosting options support serving HTTP HTTPS simultaneously. secure configuration redirect incoming HTTP traffic HTTPS hosting option. added layer protection, can consider enabling HTTP Strict Transport Security (HSTS). HSTS way instruct clients – future – refuse connect server unsecure HTTP. ensures imposter server able trick client connecting insecure HTTP future. Unfortunately, Plumber implement HTTPS support natively, documented hosting options offer ways deploy HTTPS HSTS front Plumber API.","code":""},{"path":"https://www.rplumber.io/articles/security.html","id":"dos","dir":"Articles","previous_headings":"","what":"Denial Of Service (DoS)","title":"Security","text":"Denial service (DoS) attacks employed order temporarily shut server service overwhelming traffic. DoS scenario caused single ignorant user unintentionally making request ask server impossible task, intentionally introduced malicious actor leveraging vast number machines repeatedly make requests expensive server respond . later form often called distributed denial service attack (DDoS) typically requires special infrastructure network capacity beyond scope ’ll discuss . However, practices employ designing Plumber API put safety guards around work API request might instigate. expected output harmless plot.  plot takes negligible amount time create. However, plots points take time create.  plot, 10,000 points added, took 0.124 seconds generate. doesn’t sound like much, exposed API publicly Internet, attacker easily generate enough traffic endpoint overwhelm Plumber process. Even worse, attacker make request endpoint millions billions points might cause server run memory consume much CPU deprives important system resources. Either case result Plumber process crashing altogether. solution, case, ensure reasonable safety guards place user input. can see allow user request graph 1,000 points. requests exceeding limit immediately terminated without computation. attentive resources consumed filters endpoints. Consider various values user provide API endpoint’s parameters ensure behavior system reasonable cases. API endpoints require extensive computation, consider protect endpoints (perhaps exposing authenticated users) prevent malicious user abusing system.","code":"#* This is an example of an UNSAFE endpoint which #* is vulnerable to a DOS attack. #* @get / #* @serializer png function(pts=10) {   # An example of an UNSAFE endpoint.   plot(1:pts) } #* This is an example of an safe endpoint which #* checks user input to avoid a DOS attack #* @get / #* @serializer png function(pts=10) {   if (pts > 1000 & pts > 0){     stop(\"pts must be between 1 and 1,000\")   }    plot(1:pts) }"},{"path":"https://www.rplumber.io/articles/security.html","id":"sanitization","dir":"Articles","previous_headings":"","what":"Sanitization & Injection","title":"Security","text":"time accept input user code, plan worst-case scenario. , example, API endpoint allows user specify name file read particular directory returns contents, might naively implement like . Unfortunately, API endpoint properly sanitize user input. user set file parameter ../plumber.R now endpoint return source code Plumber API. course just easy attempt read files might contain API keys sensitive data. One solution case strip special characters user input prevent users able escape different directory. File paths opportunity malicious input damage system, however. Another way user input can dangerous attack known “cross site scripting,” “XSS.” attack can leveraged whenever user input may rendered user’s browser. instance endpoint allows users comment page later displays comments users, attacked craft comment : can see, comment JavaScript embedded within , case used popup message user. course JavaScript used harmful way redirecting users malicious site, instance, uploading data special access server destination. user input might included HTML page properly escaped (see htmltools::html_escape help). Lastly, user input can used “injection attack,” user injects malicious commands might sent another system. best known family SQL injection attacks, user input meant included SQL query executed database might contain additional SQL commands leak data damage database. details SQL injection attacks mitigation strategies R available . summary, sure separate “trusted” “untrusted” objects API implementation. Anything user provides considered “untrusted” escaped sanitized. point can consider object “trusted” proceed take actions .","code":"#* This is an example of an UNSAFE endpoint which #* does not sanitize user input #* @get / function(file) {    # An example of an UNSAFE endpoint.   path <- file.path(\"./datasets\", file)   readLines(path) } #* This is an example of an endpoint which #* checks user input. #* @get / function(file) {   # Strip all \"non-word\" characters from user input   sanitizedFile <- gsub(\"\\\\W\", \"\", file)    path <- file.path(\"./datasets\", sanitizedFile)   readLines(path) } \"This is a comment with JavaScript! <script>alert('I could do something bad here!');<\/script>"},{"path":"https://www.rplumber.io/articles/security.html","id":"cross-origin-resource-sharing-cors","dir":"Articles","previous_headings":"","what":"Cross-Origin Resource Sharing (CORS)","title":"Security","text":"default, API endpoint forbids “cross-domain” requests, ’s possible workaround override behavior creating custom function forward right headers API using filter following snippet. filter defined, endpoint allow “cross-domain” requests. ’s possible disable , appending line #* @preempt cors declaration function like : Understand , temporary workaround can constitute critical security issues endpoints shouldn’t exposed CORS enabled default.","code":"#* @filter cors cors <- function(res) {     res$setHeader(\"Access-Control-Allow-Origin\", \"*\")     plumber::forward() } #* @preempt cors #* @get /sub cors_disabled <- function(a, b){   as.numeric(a) - as.numeric(b) }"},{"path":"https://www.rplumber.io/articles/security.html","id":"security-cookies","dir":"Articles","previous_headings":"","what":"Cookies","title":"Security","text":"section setting cookies, discussed mechanics setting cookies. However, intend use cookies security-sensitive purpose, aware ways cookies can exploited. First foremost, recognize client ability modify fabricate cookies send API. storing preferences user provided cookie concern. Storing something security implications – like identity user making requests – however, ; malicious user just need modify user ID saved cookie order trick API thinking someone ’re . two common workarounds concern. can store session information server identified long, cryptographically random IDs rely cookie store ID. can use signed/encrypted cookies, detailed section setting encrypted cookies. also aware cookies handled managed clients. can manage properties providing different parameters setCookie() call. expiration - cookie expire. Can either POSIXt object gives time explicitly, raw integer interpreted number seconds future cookie expire. value provided, cookie session cookie, meaning persist user closes tab/browser. Remember, however, client may accidentally maliciously retain cookie beyond assigned expiration time. security standpoint, rely client well-behaved delete cookie assigned time. http - HttpOnly property cookie determines whether cookie accessible JavaScript running domain. using cookie persist user settings host JavaScript may also leverage preferences stored cookie, want http parameter FALSE, indicating cookie HttpOnly, available JavaScript. storing session ID cookie interpretable server, set http TRUE. variety attacks (“cross-site scripting”) enable attacker run malicious JavaScript clients’ machines, ’s wise limit amount information accessible JavaScript. secure - TRUE, instructs clients send cookie connecting server HTTPS. HTTPS mechanism clients can gain assurance server ’re connected indeed server intended communicating . API uses HTTPS, using secure cookies protects use case attacker tricks one clients connecting HTTP server impersonating API. scenario, client may send cookies malicious server, point attacker use cookies server impersonate actual user. Note shouldn’t enable API stably running HTTPS. Additionally, bear mind attacker gets physical access client valid cookie, attacker copy cookie different machine begin using . Unfortunately, can’t perfectly protect attacks, can minimize impact 1.) using shorter session lifetimes (perhaps hours instead days), 2.) invalidating sessions period user inactivity, 3.) rotating session ID periodically; way ’d able detect multiple clients trying use session take action. can also consider adding additional layer security around security-sensitive endpoints (like changing user’s password). Lastly, using encrypted cookies store sensitive information, remember expiring cookie instruction ’re sending client may may honored. Thus set encrypted cookie client authenticate user user wishes log , can instruct client delete cookie. cookie stolen misbehaving client doesn’t delete cookie, ’s possible cookie still used continue making authenticated requests API.","code":""},{"path":"https://www.rplumber.io/articles/tips-and-tricks.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"Tips & Tricks","text":"’ve historically used R interactively, may find difficult define functions get executed without input Plumber requires. couple debugging techniques aware working Plumber APIs; techniques equally transferable debugging R scripts, packages, reports.","code":""},{"path":"https://www.rplumber.io/articles/tips-and-tricks.html","id":"print-debugging","dir":"Articles","previous_headings":"Debugging","what":"Print Debugging","title":"Tips & Tricks","text":"programmers first approach debugging adding print statements code order inspect state point. R, print() cat() can used print state. instance, cat(\"currently: \", ) inserted code help ensure variable point code. approach equally viable Plumber. developing Plumber API interactive environment, debugging output logged terminal called run() API. non-interactive production environment, messages included API server logs later inspection.","code":""},{"path":"https://www.rplumber.io/articles/tips-and-tricks.html","id":"router-stage-debugging","dir":"Articles","previous_headings":"Debugging","what":"Router Stage Debugging","title":"Tips & Tricks","text":"Similar print debugging, can output plumber knows stage processing pipeline. can adding hooks two key stages: \"postroute\" \"postserialize\". example, can add lines plumber.R file: execute GET request /stage_debug , expect see output like: output shows route /stage_debug calculated value 42 value serialized using json. expect see received response status 200 body containing JSON matching [42].","code":"#* @plumber function(pr) {   pr %>%     pr_hook(\"postroute\", function(req, value) {       # Print stage information       str(list(         stage = \"postroute\",         type = req$REQUEST_METHOD,         path = req$PATH_INFO,         value = value       ))       # Must return the `value` since we took one in       value     }) %>%     pr_hook(\"postserialize\", function(req, value) {       # Print stage information       str(list(         stage = \"postserialize\",         type = req$REQUEST_METHOD,         path = req$PATH_INFO,         value = value       ))       # Must return the `value` since we took one in       value     }) } #* @get /stage_debug function(req, res) {   return(42) } List of 4  $ stage: chr \"postroute\"  $ type : chr \"GET\"  $ path : chr \"/stage_debug\"  $ value: num 42 List of 4  $ stage: chr \"postserialize\"  $ type : chr \"GET\"  $ path : chr \"/stage_debug\"  $ value:List of 3   ..$ status : int 200   ..$ headers:List of 1   .. ..$ Content-Type: chr \"application/json\"   ..$ body   : 'json' chr \"[42]\""},{"path":"https://www.rplumber.io/articles/tips-and-tricks.html","id":"interactive-debugging","dir":"Articles","previous_headings":"Debugging","what":"Interactive Debugging","title":"Tips & Tricks","text":"Print debugging obvious starting point, developers eventually wish something powerful. R, capacity built browser() function. ’re unfamiliar, browser() pauses execution function gives interactive session can inspect current value internal variables even proceed function one statement time. can leverage browser() developing APIs locally adding browser() call one filters endpoints visiting API client. offers powerful technique use want inspect multiple different variables interact current state things inside function. also good way get hands dirty Plumber get better acquainted things behave low level. Consider following API endpoint: run API locally visit API web browser, ’ll see R session switch debug mode request arrives, allowing look objects contained inside req res objects.","code":"#* @get / function(req, res){   browser()    list(a=123) }"},{"path":"https://www.rplumber.io/articles/tips-and-tricks.html","id":"port-range","dir":"Articles","previous_headings":"","what":"Port Range","title":"Tips & Tricks","text":"can use [httpuv::randomPort()] define range port Plumber pick running API. programmatically","code":"# plumber.R options(\"plumber.port\" = httpuv::randomPort(min = 4000, max = 7000, n = 100))  ### define the rest of your plumber router... pr() %>%   pr_run(port = httpuv::randomPort(min = 4000, max = 7000, n = 100))"},{"path":"https://www.rplumber.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Barret Schloerke. Maintainer, author. Jeff Allen. Author, conceptor. Bruno Tremblay. Contributor. Frans van Dunné. Contributor. Sebastiaan Vandewoude. Contributor. . Copyright holder, funder.","code":""},{"path":"https://www.rplumber.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schloerke B, Allen J (2025). plumber: API Generator R. R package version 1.2.2.9000, https://github.com/rstudio/plumber, https://www.rplumber.io.","code":"@Manual{,   title = {plumber: An API Generator for R},   author = {Barret Schloerke and Jeff Allen},   year = {2025},   note = {R package version 1.2.2.9000, https://github.com/rstudio/plumber},   url = {https://www.rplumber.io}, }"},{"path":"https://www.rplumber.io/index.html","id":"plumber-","dir":"","previous_headings":"","what":"An API Generator for R","title":"An API Generator for R","text":"Plumber allows create web API merely decorating existing R source code roxygen2-like comments. Take look example. comments allow plumber make R functions available API endpoints. can use either #* prefix #', recommend former since #' collide roxygen2. can visit URL using browser terminal run R function get results. instance http://localhost:8000/plot show histogram, http://localhost:8000/echo?msg=hello echo back ‘hello’ message provided. ’re using curl via Mac/Linux terminal. might guessed, request’s query string parameters forwarded R function arguments (character strings). can also send data JSON:","code":"# plumber.R  #* Echo back the input #* @param msg The message to echo #* @get /echo function(msg=\"\") {   list(msg = paste0(\"The message is: '\", msg, \"'\")) }  #* Plot a histogram #* @serializer png #* @get /plot function() {   rand <- rnorm(100)   hist(rand) }  #* Return the sum of two numbers #* @param a The first number to add #* @param b The second number to add #* @post /sum function(a, b) {   as.numeric(a) + as.numeric(b) } library(plumber) # 'plumber.R' is the location of the file shown above pr(\"plumber.R\") %>%   pr_run(port=8000) $ curl \"http://localhost:8000/echo\"  {\"msg\":[\"The message is: ''\"]} $ curl \"http://localhost:8000/echo?msg=hello\"  {\"msg\":[\"The message is: 'hello'\"]} $ curl --data \"a=4&b=3\" \"http://localhost:8000/sum\"  [7] $ curl -H \"Content-Type: application/json\" --data '{\"a\":4, \"b\":5}' http://localhost:8000/sum  [9]"},{"path":"https://www.rplumber.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An API Generator for R","text":"can install latest stable version CRAN using following command: want try latest development version, can install GitHub.","code":"install.packages(\"plumber\") remotes::install_github(\"rstudio/plumber\") library(plumber)"},{"path":[]},{"path":"https://www.rplumber.io/index.html","id":"hosting","dir":"","previous_headings":"","what":"Hosting","title":"An API Generator for R","text":"’re just getting started hosting cloud servers, DigitalOcean integration included plumber best way get started. ’ll able get server hosting custom API just two R commands. deploy DigitalOcean, check plumber companion package plumberDeploy. Posit Connect commercial publishing platform enables R developers easily publish variety R content types, including Plumber APIs. Additional documentation available https://www.rplumber.io/articles/hosting.html#rstudio-connect-1. couple approaches hosting plumber also made available: PM2 - https://www.rplumber.io/articles/hosting.html#pm2-1 Docker - https://www.rplumber.io/articles/hosting.html#docker","code":""},{"path":"https://www.rplumber.io/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"An API Generator for R","text":"OpenCPU - server designed hosting R APIs eye towards scientific research. jug - (development discontinued) R package similar Plumber uses programmatic approach constructing API.","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":null,"dir":"Reference","previous_headings":"","what":"Hookable — Hookable","title":"Hookable — Hookable","text":"Hookable Hookable","code":""},{"path":[]},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hookable — Hookable","text":"Hookable$registerHook() Hookable$registerHooks() Hookable$clone()","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"method-registerhook-","dir":"Reference","previous_headings":"","what":"Method registerHook()","title":"Hookable — Hookable","text":"Register hook router","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hookable — Hookable","text":"","code":"Hookable$registerHook(stage, handler)"},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hookable — Hookable","text":"stage character string. handler hook function.","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"method-registerhooks-","dir":"Reference","previous_headings":"","what":"Method registerHooks()","title":"Hookable — Hookable","text":"Register hooks router","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hookable — Hookable","text":"","code":"Hookable$registerHooks(handlers)"},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hookable — Hookable","text":"handlers named list hook functions.","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hookable — Hookable","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Hookable — Hookable","text":"","code":"Hookable$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/Hookable.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hookable — Hookable","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Plumber Router — Plumber","title":"Package Plumber Router — Plumber","text":"Package Plumber Router Package Plumber Router","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Plumber Router — Plumber","text":"Routers core request handler plumber. router responsible taking incoming request, submitting appropriate filters eventually corresponding endpoint, one found. See Programmatic Usage article additional details methods available object.","code":""},{"path":[]},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Package Plumber Router — Plumber","text":"plumber::Hookable -> Plumber","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Package Plumber Router — Plumber","text":"flags internal use ","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Package Plumber Router — Plumber","text":"endpoints Plumber router endpoints read-filters Plumber router filters read-mounts Plumber router mounts read-environment Plumber router environment read-routes Plumber router routes read-","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Package Plumber Router — Plumber","text":"plumber::Hookable$registerHooks()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Package Plumber Router — Plumber","text":"Plumber$new() Plumber$run() Plumber$mount() Plumber$unmount() Plumber$registerHook() Plumber$handle() Plumber$removeHandle() Plumber$print() Plumber$serve() Plumber$route() Plumber$call() Plumber$onHeaders() Plumber$onWSOpen() Plumber$setSerializer() Plumber$setParsers() Plumber$set404Handler() Plumber$setErrorHandler() Plumber$setDocs() Plumber$setDocsCallback() Plumber$setDebug() Plumber$getDebug() Plumber$filter() Plumber$setApiSpec() Plumber$getApiSpec() Plumber$addEndpoint() Plumber$addAssets() Plumber$addFilter() Plumber$addGlobalProcessor() Plumber$openAPIFile() Plumber$swaggerFile() Plumber$clone()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Package Plumber Router — Plumber","text":"Create new Plumber router See also plumb(), pr()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$new(file = NULL, filters = defaultPlumberFilters, envir)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"file path file plumb filters list Plumber filters envir environment used enclosure routers execution","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Package Plumber Router — Plumber","text":"new Plumber router","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Package Plumber Router — Plumber","text":"Start server using Plumber object. See also: pr_run()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$run(   host = \"127.0.0.1\",   port = get_option_or_env(\"plumber.port\", NULL),   swagger = deprecated(),   debug = missing_arg(),   swaggerCallback = missing_arg(),   ...,   docs = missing_arg(),   quiet = FALSE )"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"host string valid IPv4 IPv6 address owned server, application listen . \"0.0.0.0\" represents IPv4 addresses \"::/0\" represents IPv6 addresses. port number integer indicates server port listened . Note Unix-like systems including Linux Mac OS X, port numbers smaller 1025 require root privileges. value need explicitly assigned. explicitly set , see options_plumber(). swagger Deprecated. Please use docs instead. See $setDocs(docs) $setApiSpec() customization. debug TRUE, provide insight API errors. Using value last duration run. $setDebug() called, debug default FALSE $run() time. See $setDebug() details. swaggerCallback optional single-argument function called back URL OpenAPI user interface one becomes ready. missing, defaults information previously set $setDocsCallback(). value used running router. ... empty. docs Visual documentation value use running API. value used running router. missing, defaults information previously set setDocs(). customization, see $setDocs() pr_set_docs() examples. quiet TRUE, print routine startup messages.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-mount-","dir":"Reference","previous_headings":"","what":"Method mount()","title":"Package Plumber Router — Plumber","text":"Mount Plumber router Plumber routers can “nested” mounting one another using mount() method. allows compartmentalize API paths great technique decomposing large APIs smaller files. See also: pr_mount()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$mount(path, router)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"path character string. mount router. router Plumber router. Router mounted.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ root <- pr()  users <- Plumber$new(\"users.R\") root$mount(\"/users\", users)  products <- Plumber$new(\"products.R\") root$mount(\"/products\", products) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-unmount-","dir":"Reference","previous_headings":"","what":"Method unmount()","title":"Package Plumber Router — Plumber","text":"Unmount Plumber router","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$unmount(path)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"path character string. unmount router.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-registerhook-","dir":"Reference","previous_headings":"","what":"Method registerHook()","title":"Package Plumber Router — Plumber","text":"Register hook Plumber routers support notion \"hooks\" can registered execute code particular point lifecycle request. Plumber routers currently support four hooks: preroute(data, req, res) postroute(data, req, res, value) preserialize(data, req, res, value) postserialize(data, req, res, value) access disposable environment data parameter created temporary data store request. Hooks can store temporary data hooks can reused hooks processing request. One feature defining hooks Plumber routers ability modify returned value. convention hooks : function accepts parameter named value expected return new value. unmodified version value passed , mutated value. either case, hook accepts parameter named value, whatever hook returns used new value response. can add hooks using registerHook method, can add multiple hooks using registerHooks method takes name list names names hooks, values handlers . See also: pr_hook(), pr_hooks()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$registerHook(   stage = c(\"preroute\", \"postroute\", \"preserialize\", \"postserialize\", \"exit\"),   handler )"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"stage character string. Point lifecycle request. handler hook function.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ pr <- pr() pr$registerHook(\"preroute\", function(req){   cat(\"Routing a request for\", req$PATH_INFO, \"...\\n\") }) pr$registerHooks(list(   preserialize=function(req, value){     print(\"About to serialize this value:\")     print(value)      # Must return the value since we took one in. Here we're not choosing     # to mutate it, but we could.     value   },   postserialize=function(res){     print(\"We serialized the value as:\")     print(res$body)   } ))  pr$handle(\"GET\", \"/\", function(){ 123 }) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-handle-","dir":"Reference","previous_headings":"","what":"Method handle()","title":"Package Plumber Router — Plumber","text":"Define endpoints “handler” functions define handle calls identical code defined plumber.R file using annotations define API. handle() method takes additional arguments allow control nuanced behavior endpoint like filter might preempt serializer use. See also: pr_handle(), pr_get(), pr_post(), pr_put(), pr_delete()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$handle(   methods,   path,   handler,   preempt,   serializer,   parsers,   endpoint,   ... )"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"methods character string. http method. path character string. Api endpoints handler handler function. preempt preempt function. serializer serializer function. parsers named list parsers. endpoint PlumberEndpoint object. ... additional arguments PlumberEndpoint new method (namely lines, params, comments, responses tags. Excludes envir).","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ pr <- pr() pr$handle(\"GET\", \"/\", function(){   \"<html><h1>Programmatic Plumber!<\/h1><\/html>\" }, serializer=plumber::serializer_html()) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-removehandle-","dir":"Reference","previous_headings":"","what":"Method removeHandle()","title":"Package Plumber Router — Plumber","text":"Remove endpoints","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$removeHandle(methods, path, preempt = NULL)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"methods character string. http method. path character string. Api endpoints preempt preempt function.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Package Plumber Router — Plumber","text":"Print representation plumber router.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$print(prefix = \"\", topLevel = TRUE, ...)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"prefix character string. Prefix append representation. topLevel logical value. method executed top level router, set TRUE. ... additional arguments recursive calls","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Package Plumber Router — Plumber","text":"terminal friendly representation plumber router.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-serve-","dir":"Reference","previous_headings":"","what":"Method serve()","title":"Package Plumber Router — Plumber","text":"Serve request","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$serve(req, res)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"req request object res response object","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-route-","dir":"Reference","previous_headings":"","what":"Method route()","title":"Package Plumber Router — Plumber","text":"Route request","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$route(req, res)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"req request object res response object","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-call-","dir":"Reference","previous_headings":"","what":"Method call()","title":"Package Plumber Router — Plumber","text":"httpuv interface call function. (Required httpuv)","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$call(req)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"req request object","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-onheaders-","dir":"Reference","previous_headings":"","what":"Method onHeaders()","title":"Package Plumber Router — Plumber","text":"httpuv interface onHeaders function. (Required httpuv)","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$onHeaders(req)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"req request object","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-onwsopen-","dir":"Reference","previous_headings":"","what":"Method onWSOpen()","title":"Package Plumber Router — Plumber","text":"httpuv interface onWSOpen function. (Required httpuv)","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$onWSOpen(ws)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"ws WebSocket object","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setserializer-","dir":"Reference","previous_headings":"","what":"Method setSerializer()","title":"Package Plumber Router — Plumber","text":"Sets default serializer router. See also: pr_set_serializer()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setSerializer(serializer)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"serializer serializer function","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ pr <- pr() pr$setSerializer(serializer_unboxed_json()) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setparsers-","dir":"Reference","previous_headings":"","what":"Method setParsers()","title":"Package Plumber Router — Plumber","text":"Sets default parsers router. Initialized c(\"json\", \"form\", \"text\", \"octet\", \"multi\")","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setParsers(parsers)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"parsers Can one : NULL value character vector parser names named list() whose keys parser names names values arguments applied .call() TRUE value, default combining parsers. great seeing possible, great security purposes parser name \"\" found character value list name, remaining parsers added. using list, parser information already defined maintain existing argument values.  remaining parsers use default arguments. Example:","code":"# provide a character string parsers = \"json\"  # provide a named list with no arguments parsers = list(json = list())  # provide a named list with arguments; include `rds` parsers = list(json = list(simplifyVector = FALSE), rds = list())  # default plumber parsers parsers = c(\"json\", \"form\", \"text\", \"octet\", \"multi\")"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-set-handler-","dir":"Reference","previous_headings":"","what":"Method set404Handler()","title":"Package Plumber Router — Plumber","text":"Sets handler gets called incoming request can’t served filter, endpoint, sub-router. See also: pr_set_404()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$set404Handler(fun)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"fun handler function.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ pr <- pr() pr$set404Handler(function(req, res) {cat(req$PATH_INFO)}) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-seterrorhandler-","dir":"Reference","previous_headings":"","what":"Method setErrorHandler()","title":"Package Plumber Router — Plumber","text":"Sets error handler gets invoked filter endpoint generates error. See also: pr_set_404()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setErrorHandler(fun)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"fun handler function.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"\\dontrun{ pr <- pr() pr$setErrorHandler(function(req, res, err) {   message(\"Found error: \")   str(err) }) }"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setdocs-","dir":"Reference","previous_headings":"","what":"Method setDocs()","title":"Package Plumber Router — Plumber","text":"Set visual documentation use API See also: pr_set_docs(), register_docs(), registered_docs()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setDocs(docs = get_option_or_env(\"plumber.docs\", TRUE), ...)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"docs character value logical value. See pr_set_docs() examples. using options_plumber(), value must set initializing Plumber router. ... Arguments visual documentation. See visual documentation package details.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setdocscallback-","dir":"Reference","previous_headings":"","what":"Method setDocsCallback()","title":"Package Plumber Router — Plumber","text":"Set callback notify API's visual documentation located. set, called character string corresponding API docs url. allows RStudio locate visual documentation. using options_plumber(), value must set initializing Plumber router. See also: pr_set_docs_callback()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setDocsCallback(   callback = get_option_or_env(\"plumber.docs.callback\", NULL) )"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"callback callback function taking action docs url. (Also accepts NULL values disable callback.)","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setdebug-","dir":"Reference","previous_headings":"","what":"Method setDebug()","title":"Package Plumber Router — Plumber","text":"Set debug value include error messages. See also: $getDebug() pr_set_debug()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setDebug(debug = FALSE)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"debug TRUE provides insight API errors.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-getdebug-","dir":"Reference","previous_headings":"","what":"Method getDebug()","title":"Package Plumber Router — Plumber","text":"Retrieve debug value. never set, return FALSE. See also: $getDebug() pr_set_debug()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$getDebug()"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-filter-","dir":"Reference","previous_headings":"","what":"Method filter()","title":"Package Plumber Router — Plumber","text":"Add filter plumber router See also: pr_filter()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$filter(name, expr, serializer)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"name character string. Name filter expr expr resolve filter function filter function serializer serializer function","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-setapispec-","dir":"Reference","previous_headings":"","what":"Method setApiSpec()","title":"Package Plumber Router — Plumber","text":"Allows modify router autogenerated OpenAPI Specification Note, returned value sent serializer_unboxed_json() turn length 1 vectors atomic values. force vector serialize array size 1, sure call .list() value. list() objects always serialized array value. See also: pr_set_api_spec()","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$setApiSpec(api = NULL)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"api can OpenAPI Specification formatted list object function accepts OpenAPI Specification autogenerated plumber returns OpenAPI Specification formatted list object. path OpenAPI Specification value returned validated OAS compatibility.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-getapispec-","dir":"Reference","previous_headings":"","what":"Method getApiSpec()","title":"Package Plumber Router — Plumber","text":"Retrieve OpenAPI file","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$getApiSpec()"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-addendpoint-","dir":"Reference","previous_headings":"","what":"Method addEndpoint()","title":"Package Plumber Router — Plumber","text":"addEndpoint deprecated v0.4.0 removed coming release. Please use handle() instead.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$addEndpoint(   verbs,   path,   expr,   serializer,   processors,   preempt = NULL,   params = NULL,   comments )"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"verbs verbs path path expr expr serializer serializer processors processors preempt preempt params params comments comments","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-addassets-","dir":"Reference","previous_headings":"","what":"Method addAssets()","title":"Package Plumber Router — Plumber","text":"addAssets deprecated v0.4.0 removed coming release. Please use mount PlumberStatic$new() instead.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$addAssets(dir, path = \"/public\", options = list())"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"dir dir path path options options","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-addfilter-","dir":"Reference","previous_headings":"","what":"Method addFilter()","title":"Package Plumber Router — Plumber","text":"$addFilter() deprecated v0.4.0 removed coming release. Please use $filter() instead.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$addFilter(name, expr, serializer, processors)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"name name expr expr serializer serializer processors processors","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-addglobalprocessor-","dir":"Reference","previous_headings":"","what":"Method addGlobalProcessor()","title":"Package Plumber Router — Plumber","text":"$addGlobalProcessor() deprecated v0.4.0 removed coming release. Please use $registerHook(s) instead.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$addGlobalProcessor(proc)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"proc proc","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-openapifile-","dir":"Reference","previous_headings":"","what":"Method openAPIFile()","title":"Package Plumber Router — Plumber","text":"Deprecated. Retrieve OpenAPI file","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$openAPIFile()"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-swaggerfile-","dir":"Reference","previous_headings":"","what":"Method swaggerFile()","title":"Package Plumber Router — Plumber","text":"Deprecated. Retrieve OpenAPI file","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$swaggerFile()"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Package Plumber Router — Plumber","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Plumber Router — Plumber","text":"","code":"Plumber$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Plumber Router — Plumber","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/Plumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Plumber Router — Plumber","text":"","code":"## ------------------------------------------------ ## Method `Plumber$mount` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ root <- pr()  users <- Plumber$new(\"users.R\") root$mount(\"/users\", users)  products <- Plumber$new(\"products.R\") root$mount(\"/products\", products) } # }  ## ------------------------------------------------ ## Method `Plumber$registerHook` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ pr <- pr() pr$registerHook(\"preroute\", function(req){   cat(\"Routing a request for\", req$PATH_INFO, \"...\\n\") }) pr$registerHooks(list(   preserialize=function(req, value){     print(\"About to serialize this value:\")     print(value)      # Must return the value since we took one in. Here we're not choosing     # to mutate it, but we could.     value   },   postserialize=function(res){     print(\"We serialized the value as:\")     print(res$body)   } ))  pr$handle(\"GET\", \"/\", function(){ 123 }) } # }  ## ------------------------------------------------ ## Method `Plumber$handle` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ pr <- pr() pr$handle(\"GET\", \"/\", function(){   \"<html><h1>Programmatic Plumber!<\/h1><\/html>\" }, serializer=plumber::serializer_html()) } # }  ## ------------------------------------------------ ## Method `Plumber$setSerializer` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ pr <- pr() pr$setSerializer(serializer_unboxed_json()) } # }  ## ------------------------------------------------ ## Method `Plumber$set404Handler` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ pr <- pr() pr$set404Handler(function(req, res) {cat(req$PATH_INFO)}) } # }  ## ------------------------------------------------ ## Method `Plumber$setErrorHandler` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ pr <- pr() pr$setErrorHandler(function(req, res, err) {   message(\"Found error: \")   str(err) }) } # }"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Plumber Endpoint — PlumberEndpoint","title":"Plumber Endpoint — PlumberEndpoint","text":"Plumber Endpoint Plumber Endpoint","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plumber Endpoint — PlumberEndpoint","text":"Defines terminal handler Plumber router. Parameters values obtained parsing blocks lines plumber file. can also provided manually historical reasons.","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Plumber Endpoint — PlumberEndpoint","text":"plumber::Hookable -> plumber::PlumberStep -> PlumberEndpoint","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Plumber Endpoint — PlumberEndpoint","text":"verbs character vector. http methods. historical reasons accept multiple verbs single path. Now simpler just parse separate verb/path endpoint, just . path character string. endpoint path comments endpoint comments description endpoint description responses endpoint responses params endpoint parameters tags endpoint tags parsers step allowed parsers","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Plumber Endpoint — PlumberEndpoint","text":"plumber::Hookable$registerHooks() plumber::PlumberStep$exec() plumber::PlumberStep$registerHook()","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Plumber Endpoint — PlumberEndpoint","text":"PlumberEndpoint$getTypedParams() PlumberEndpoint$canServe() PlumberEndpoint$matchesPath() PlumberEndpoint$new() PlumberEndpoint$getPathParams() PlumberEndpoint$getFunc() PlumberEndpoint$getFuncParams() PlumberEndpoint$getEndpointParams() PlumberEndpoint$setPath() PlumberEndpoint$clone()","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-gettypedparams-","dir":"Reference","previous_headings":"","what":"Method getTypedParams()","title":"Plumber Endpoint — PlumberEndpoint","text":"retrieve endpoint typed parameters","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$getTypedParams()"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-canserve-","dir":"Reference","previous_headings":"","what":"Method canServe()","title":"Plumber Endpoint — PlumberEndpoint","text":"ability serve request","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$canServe(req)"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"req request object","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Plumber Endpoint — PlumberEndpoint","text":"logical. TRUE endpoint can serve request.","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-matchespath-","dir":"Reference","previous_headings":"","what":"Method matchesPath()","title":"Plumber Endpoint — PlumberEndpoint","text":"determines route matches requested path","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$matchesPath(path)"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"path url path","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Plumber Endpoint — PlumberEndpoint","text":"logical. TRUE endpoint matches requested path.","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Plumber Endpoint — PlumberEndpoint","text":"Create new PlumberEndpoint object","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$new(   verbs,   path,   expr,   envir,   serializer,   parsers,   lines,   params,   comments,   description,   responses,   tags,   srcref )"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"verbs Endpoint verb Ex: \"GET\", \"POST\" path Endpoint path. Ex: \"/index.html\", \"/foo/bar/baz\" expr Endpoint function expression evaluates function. envir Endpoint environment serializer Endpoint serializer. Ex: serializer_json() parsers Can one : NULL value character vector parser names named list() whose keys parser names names values arguments applied .call() TRUE value, default combining parsers. great seeing possible, great security purposes parser name \"\" found character value list name, remaining parsers added. using list, parser information already defined maintain existing argument values.  remaining parsers use default arguments. Example:   lines Endpoint block params Endpoint params comments, description, responses, tags Values used within OpenAPI Spec srcref srcref attribute block","code":"# provide a character string parsers = \"json\"  # provide a named list with no arguments parsers = list(json = list())  # provide a named list with arguments; include `rds` parsers = list(json = list(simplifyVector = FALSE), rds = list())  # default plumber parsers parsers = c(\"json\", \"form\", \"text\", \"octet\", \"multi\")"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Plumber Endpoint — PlumberEndpoint","text":"new PlumberEndpoint object","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-getpathparams-","dir":"Reference","previous_headings":"","what":"Method getPathParams()","title":"Plumber Endpoint — PlumberEndpoint","text":"retrieve endpoint path parameters","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$getPathParams(path)"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"path endpoint path","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-getfunc-","dir":"Reference","previous_headings":"","what":"Method getFunc()","title":"Plumber Endpoint — PlumberEndpoint","text":"retrieve endpoint function","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$getFunc()"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-getfuncparams-","dir":"Reference","previous_headings":"","what":"Method getFuncParams()","title":"Plumber Endpoint — PlumberEndpoint","text":"retrieve endpoint expression parameters","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$getFuncParams()"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-getendpointparams-","dir":"Reference","previous_headings":"","what":"Method getEndpointParams()","title":"Plumber Endpoint — PlumberEndpoint","text":"retrieve endpoint defined parameters","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$getEndpointParams()"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-setpath-","dir":"Reference","previous_headings":"","what":"Method setPath()","title":"Plumber Endpoint — PlumberEndpoint","text":"Updates $path sanitized path updates internal path meta-data","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$setPath(path)"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"path Path set $path. missing beginning slash, one added.","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Plumber Endpoint — PlumberEndpoint","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Endpoint — PlumberEndpoint","text":"","code":"PlumberEndpoint$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/PlumberEndpoint.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Endpoint — PlumberEndpoint","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Static file router — PlumberStatic","title":"Static file router — PlumberStatic","text":"Static file router Static file router","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static file router — PlumberStatic","text":"Creates router backed directory files disk.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Static file router — PlumberStatic","text":"plumber::Hookable -> plumber::Plumber -> PlumberStatic","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Static file router — PlumberStatic","text":"plumber::Hookable$registerHooks() plumber::Plumber$addAssets() plumber::Plumber$addEndpoint() plumber::Plumber$addFilter() plumber::Plumber$addGlobalProcessor() plumber::Plumber$call() plumber::Plumber$filter() plumber::Plumber$getApiSpec() plumber::Plumber$getDebug() plumber::Plumber$handle() plumber::Plumber$mount() plumber::Plumber$onHeaders() plumber::Plumber$onWSOpen() plumber::Plumber$openAPIFile() plumber::Plumber$registerHook() plumber::Plumber$removeHandle() plumber::Plumber$route() plumber::Plumber$run() plumber::Plumber$serve() plumber::Plumber$set404Handler() plumber::Plumber$setApiSpec() plumber::Plumber$setDebug() plumber::Plumber$setDocs() plumber::Plumber$setDocsCallback() plumber::Plumber$setErrorHandler() plumber::Plumber$setParsers() plumber::Plumber$setSerializer() plumber::Plumber$swaggerFile() plumber::Plumber$unmount()","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Static file router — PlumberStatic","text":"PlumberStatic$new() PlumberStatic$print() PlumberStatic$clone()","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Static file router — PlumberStatic","text":"Create new PlumberStatic router","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file router — PlumberStatic","text":"","code":"PlumberStatic$new(direc, options)"},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file router — PlumberStatic","text":"direc path asset directory. options options evaluated PlumberStatic router environment","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Static file router — PlumberStatic","text":"new PlumberStatic router","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Static file router — PlumberStatic","text":"Print representation PlumberStatic() router.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file router — PlumberStatic","text":"","code":"PlumberStatic$print(prefix = \"\", topLevel = TRUE, ...)"},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file router — PlumberStatic","text":"prefix character string. Prefix append representation. topLevel logical value. method executed top level router, set TRUE. ... additional arguments recursive calls","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Static file router — PlumberStatic","text":"terminal friendly representation PlumberStatic() router.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Static file router — PlumberStatic","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file router — PlumberStatic","text":"","code":"PlumberStatic$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/PlumberStatic.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file router — PlumberStatic","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":null,"dir":"Reference","previous_headings":"","what":"plumber step R6 class — PlumberStep","title":"plumber step R6 class — PlumberStep","text":"object representing step lifecycle treatment request plumber router.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"plumber step R6 class — PlumberStep","text":"plumber::Hookable -> PlumberStep","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"plumber step R6 class — PlumberStep","text":"srcref step block lines lines step block serializer step serializer function","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"plumber step R6 class — PlumberStep","text":"plumber::Hookable$registerHooks()","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"plumber step R6 class — PlumberStep","text":"PlumberStep$new() PlumberStep$exec() PlumberStep$registerHook() PlumberStep$clone()","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"plumber step R6 class — PlumberStep","text":"Create new PlumberStep() object","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plumber step R6 class — PlumberStep","text":"","code":"PlumberStep$new(expr, envir, lines, serializer, srcref)"},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plumber step R6 class — PlumberStep","text":"expr step expr envir step environment lines step block serializer step serializer srcref srcref attribute block","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"plumber step R6 class — PlumberStep","text":"new PlumberStep object","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"method-exec-","dir":"Reference","previous_headings":"","what":"Method exec()","title":"plumber step R6 class — PlumberStep","text":"step execution function","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"plumber step R6 class — PlumberStep","text":"","code":"PlumberStep$exec(req, res)"},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"plumber step R6 class — PlumberStep","text":"req, res Request response objects created Plumber request","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"method-registerhook-","dir":"Reference","previous_headings":"","what":"Method registerHook()","title":"plumber step R6 class — PlumberStep","text":"step hook registration method","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"plumber step R6 class — PlumberStep","text":"","code":"PlumberStep$registerHook(   stage = c(\"preexec\", \"postexec\", \"aroundexec\"),   handler )"},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"plumber step R6 class — PlumberStep","text":"stage character string. handler step handler function.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"plumber step R6 class — PlumberStep","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"plumber step R6 class — PlumberStep","text":"","code":"PlumberStep$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/PlumberStep.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"plumber step R6 class — PlumberStep","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/as_attachment.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an attachment response — as_attachment","title":"Return an attachment response — as_attachment","text":"set appropriate fields Content-Disposition header value. make sure attachment used, sure serializer eventually calls serializer_headers","code":""},{"path":"https://www.rplumber.io/reference/as_attachment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an attachment response — as_attachment","text":"","code":"as_attachment(value, filename = NULL)"},{"path":"https://www.rplumber.io/reference/as_attachment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an attachment response — as_attachment","text":"value Response value saved filename File name use saving attachment. filename provided, value treated regular attachment","code":""},{"path":"https://www.rplumber.io/reference/as_attachment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an attachment response — as_attachment","text":"Object class \"plumber_attachment\"","code":""},{"path":"https://www.rplumber.io/reference/as_attachment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an attachment response — as_attachment","text":"","code":"if (FALSE) { # \\dontrun{ # plumber.R  #' @get /data #' @serializer csv function() {   # will cause the file to be saved as `iris.csv`, not `data` or `data.csv`   as_attachment(iris, \"iris.csv\") } } # }"},{"path":"https://www.rplumber.io/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — addSerializer","title":"Deprecated functions — addSerializer","text":"Deprecated functions","code":""},{"path":"https://www.rplumber.io/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — addSerializer","text":"","code":"addSerializer(name, serializer, verbose = TRUE)  getCharacterSet(contentType = NULL)  sessionCookie(   key,   name = \"plumber\",   expiration = FALSE,   http = TRUE,   secure = FALSE,   sameSite = FALSE )"},{"path":"https://www.rplumber.io/reference/deprecated.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Deprecated functions — addSerializer","text":"addSerializer(): See register_serializer() getCharacterSet(): See get_character_set() sessionCookie(): See session_cookie()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated R6 functions — hookable","title":"Deprecated R6 functions — hookable","text":"Deprecated R6 functions Deprecated R6 functions Deprecated R6 functions Deprecated R6 functions","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Deprecated R6 functions — hookable","text":"hookable: See Hookable() plumber: See Plumber()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Deprecated R6 functions — hookable","text":"plumber::Hookable -> hookable","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Deprecated R6 functions — hookable","text":"plumber::Hookable$registerHook() plumber::Hookable$registerHooks()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deprecated R6 functions — hookable","text":"hookable$new() hookable$clone()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Deprecated R6 functions — hookable","text":"Initialize new hookable. Throws deprecated warning prompting user use Hookable","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated R6 functions — hookable","text":"","code":"hookable$new()"},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Deprecated R6 functions — hookable","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated R6 functions — hookable","text":"","code":"hookable$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated R6 functions — hookable","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Deprecated R6 functions — hookable","text":"plumber::Hookable -> plumber::Plumber -> plumber","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"Deprecated R6 functions — hookable","text":"plumber::Hookable$registerHooks() plumber::Plumber$addAssets() plumber::Plumber$addEndpoint() plumber::Plumber$addFilter() plumber::Plumber$addGlobalProcessor() plumber::Plumber$call() plumber::Plumber$filter() plumber::Plumber$getApiSpec() plumber::Plumber$getDebug() plumber::Plumber$handle() plumber::Plumber$mount() plumber::Plumber$onHeaders() plumber::Plumber$onWSOpen() plumber::Plumber$openAPIFile() plumber::Plumber$print() plumber::Plumber$registerHook() plumber::Plumber$removeHandle() plumber::Plumber$route() plumber::Plumber$run() plumber::Plumber$serve() plumber::Plumber$set404Handler() plumber::Plumber$setApiSpec() plumber::Plumber$setDebug() plumber::Plumber$setDocs() plumber::Plumber$setDocsCallback() plumber::Plumber$setErrorHandler() plumber::Plumber$setParsers() plumber::Plumber$setSerializer() plumber::Plumber$swaggerFile() plumber::Plumber$unmount()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"public-methods-1","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deprecated R6 functions — hookable","text":"plumber$new() plumber$clone()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"method-new--1","dir":"Reference","previous_headings":"","what":"Method new()","title":"Deprecated R6 functions — hookable","text":"Initialize new plumber. Throws deprecated warning prompting user use Plumber","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated R6 functions — hookable","text":"","code":"plumber$new(...)"},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated R6 functions — hookable","text":"... params passed Plumber$new()","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"method-clone--1","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Deprecated R6 functions — hookable","text":"objects class cloneable method.","code":""},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated R6 functions — hookable","text":"","code":"plumber$clone(deep = FALSE)"},{"path":"https://www.rplumber.io/reference/deprecated_r6.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated R6 functions — hookable","text":"deep Whether make deep clone.","code":""},{"path":"https://www.rplumber.io/reference/digitalocean.html","id":null,"dir":"Reference","previous_headings":"","what":"DigitalOcean Plumber server — do_provision","title":"DigitalOcean Plumber server — do_provision","text":"methods now defunct. Please use plumberDeploy R package.","code":""},{"path":"https://www.rplumber.io/reference/digitalocean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DigitalOcean Plumber server — do_provision","text":"","code":"do_provision(...)  do_configure_https(...)  do_deploy_api(...)  do_forward(...)  do_remove_api(...)  do_remove_forward(...)"},{"path":"https://www.rplumber.io/reference/endpoint_serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint Serializer with Hooks — endpoint_serializer","title":"Endpoint Serializer with Hooks — endpoint_serializer","text":"method allows serializers return preexec, postexec, aroundexec () hooks addition serializer. useful graphics device serializers need preexec postexec hook capture graphics output.","code":""},{"path":"https://www.rplumber.io/reference/endpoint_serializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint Serializer with Hooks — endpoint_serializer","text":"","code":"endpoint_serializer(   serializer,   preexec_hook = NULL,   postexec_hook = NULL,   aroundexec_hook = NULL )"},{"path":"https://www.rplumber.io/reference/endpoint_serializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint Serializer with Hooks — endpoint_serializer","text":"serializer Serializer method used.  method already initialization arguments applied. preexec_hook Function run directly PlumberEndpoint calls route method. postexec_hook Function run directly PlumberEndpoint calls route method. aroundexec_hook Function run around PlumberEndpoint call. Must handle .next argument continue execution.","code":""},{"path":"https://www.rplumber.io/reference/endpoint_serializer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Endpoint Serializer with Hooks — endpoint_serializer","text":"preexec postexec hooks happened directly route executed. hooks specific single PlumberEndpoint's route calculation.","code":""},{"path":"https://www.rplumber.io/reference/endpoint_serializer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint Serializer with Hooks — endpoint_serializer","text":"","code":"# The definition of `serializer_device` returns # * a `serializer_content_type` serializer # * `aroundexec` hook print(serializer_device) #> function (type, dev_on, dev_off = grDevices::dev.off)  #> { #>     stopifnot(!missing(type)) #>     stopifnot(!missing(dev_on)) #>     stopifnot(is.function(dev_on)) #>     stopifnot(length(formals(dev_on)) > 0) #>     if (!any(c(\"filename\", \"...\") %in% names(formals(dev_on)))) { #>         stop(\"`dev_on` must contain an arugment called `filename` or have `...`\") #>     } #>     stopifnot(is.function(dev_off)) #>     endpoint_serializer(serializer = serializer_content_type(type),  #>         aroundexec_hook = function(..., .next) { #>             tmpfile <- tempfile() #>             dev_on(filename = tmpfile) #>             device_id <- dev.cur() #>             dev_off_once <- once(function() dev_off(device_id)) #>             success <- function(value) { #>                 dev_off_once() #>                 if (!file.exists(tmpfile)) { #>                   stop(\"The device output file is missing. Did you produce an image?\",  #>                     call. = FALSE) #>                 } #>                 con <- file(tmpfile, \"rb\") #>                 on.exit({ #>                   close(con) #>                 }, add = TRUE) #>                 img <- readBin(con, \"raw\", file.info(tmpfile)$size) #>                 img #>             } #>             cleanup <- function() { #>                 dev_off_once() #>                 on.exit({ #>                   unlink(tmpfile) #>                 }, add = TRUE) #>             } #>             async <- FALSE #>             on.exit({ #>                 if (!async) { #>                   cleanup() #>                 } #>             }, add = TRUE) #>             result <- promises::with_promise_domain(createGraphicsDevicePromiseDomain(device_id),  #>                 { #>                   .next(...) #>                 }) #>             if (is.promising(result)) { #>                 async <- TRUE #>                 result %>% then(success) %>% finally(cleanup) #>             } #>             else { #>                 success(result) #>             } #>         }) #> } #> <bytecode: 0x5594bbc98a88> #> <environment: namespace:plumber>"},{"path":"https://www.rplumber.io/reference/forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward Request to The Next Handler — forward","title":"Forward Request to The Next Handler — forward","text":"function used filter done processing request wishes pass control next handler chain. called filter, assumption filter fully handled request filters endpoints evaluated request.","code":""},{"path":"https://www.rplumber.io/reference/forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward Request to The Next Handler — forward","text":"","code":"forward()"},{"path":"https://www.rplumber.io/reference/get_character_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Request character set — get_character_set","title":"Request character set — get_character_set","text":"Request character set","code":""},{"path":"https://www.rplumber.io/reference/get_character_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request character set — get_character_set","text":"","code":"get_character_set(content_type = NULL)"},{"path":"https://www.rplumber.io/reference/get_character_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request character set — get_character_set","text":"content_type Request Content-Type header","code":""},{"path":"https://www.rplumber.io/reference/get_character_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request character set — get_character_set","text":"Default UTF-8. Otherwise return charset defined request header.","code":""},{"path":"https://www.rplumber.io/reference/include_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Send File Contents as Response — include_file","title":"Send File Contents as Response — include_file","text":"Returns file given path response. want endpoint return file attachment user download see as_attachment().","code":""},{"path":"https://www.rplumber.io/reference/include_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send File Contents as Response — include_file","text":"","code":"include_file(file, res, content_type = getContentType(tools::file_ext(file)))  include_html(file, res)  include_md(file, res, format = NULL)  include_rmd(file, res, format = NULL)"},{"path":"https://www.rplumber.io/reference/include_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send File Contents as Response — include_file","text":"file path file return res response object write content_type provided, given value sent Content-Type header response. Defaults contentType file extension. disable Content-Type header, set content_type = NULL. format Passed output_format rmarkdown::render","code":""},{"path":"https://www.rplumber.io/reference/include_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Send File Contents as Response — include_file","text":"include_html merely return file proper content_type HTML. include_md include_rmd process given markdown file rmarkdown::render return resultant HTML response.","code":""},{"path":"https://www.rplumber.io/reference/is_plumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Plumber object — is_plumber","title":"Determine if Plumber object — is_plumber","text":"Determine Plumber object","code":""},{"path":"https://www.rplumber.io/reference/is_plumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Plumber object — is_plumber","text":"","code":"is_plumber(pr)"},{"path":"https://www.rplumber.io/reference/is_plumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Plumber object — is_plumber","text":"pr Hopefully Plumber object","code":""},{"path":"https://www.rplumber.io/reference/is_plumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Plumber object — is_plumber","text":"Logical value pr inherits Plumber","code":""},{"path":"https://www.rplumber.io/reference/is_plumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Plumber object — is_plumber","text":"","code":"is_plumber(Plumber$new()) # TRUE #> [1] TRUE is_plumber(list()) # FALSE #> [1] FALSE"},{"path":"https://www.rplumber.io/reference/options_plumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Plumber options — options_plumber","title":"Plumber options — options_plumber","text":"number global options affect Plumber's behavior. can set globally options() options_plumber(). Options set using options_plumber() include plumber. prefix. Alternatively, environment variable can used set plumber options using uppercase underscores (.e. set plumber.apiHost can set environment variable PLUMBER_APIHOST).","code":""},{"path":"https://www.rplumber.io/reference/options_plumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber options — options_plumber","text":"","code":"options_plumber(   ...,   port = getOption(\"plumber.port\"),   docs = getOption(\"plumber.docs\"),   docs.callback = getOption(\"plumber.docs.callback\"),   trailingSlash = getOption(\"plumber.trailingSlash\"),   methodNotAllowed = getOption(\"plumber.methodNotAllowed\"),   apiURL = getOption(\"plumber.apiURL\"),   apiScheme = getOption(\"plumber.apiScheme\"),   apiHost = getOption(\"plumber.apiHost\"),   apiPort = getOption(\"plumber.apiPort\"),   apiPath = getOption(\"plumber.apiPath\"),   maxRequestSize = getOption(\"plumber.maxRequestSize\"),   sharedSecret = getOption(\"plumber.sharedSecret\"),   legacyRedirects = getOption(\"plumber.legacyRedirects\") )  get_option_or_env(x, default = NULL)"},{"path":"https://www.rplumber.io/reference/options_plumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber options — options_plumber","text":"... Ignored. empty port, docs, docs.callback, trailingSlash, methodNotAllowed, apiScheme, apiHost, apiPort, apiPath, apiURL, maxRequestSize, sharedSecret, legacyRedirects See details x character string holding option name. default specified option set options list,     value returned.  facilitates retrieving option     checking whether set setting separately .","code":""},{"path":"https://www.rplumber.io/reference/options_plumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plumber options — options_plumber","text":"complete, prior set options() values. particular parameter supplied, return current value. parameters supplied, returned values current options() values.","code":""},{"path":"https://www.rplumber.io/reference/options_plumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plumber options — options_plumber","text":"plumber.port Port Plumber attempt use start http server. port already use, server able start. Defaults NULL. plumber.docs Name visual documentation interface use. Defaults TRUE, use \"swagger\". plumber.docs.callback function. Called single parameter corresponding visual documentation url Plumber server ready. can used RStudio open docs API ran editor. Defaults option NULL. plumber.trailingSlash Logical value allows router redirect request matching route trailing slash. example, set TRUE GET route /test/ existed, GET request /test?=1 redirect /test/?=1. Defaults FALSE. option default TRUE future release. plumber.methodNotAllowed Logical value allows router notify unavailable method requested, different request method allowed. example, set TRUE GET route /test existed, POST request /test receive 405 status allowed methods. Defaults TRUE. plumber.apiURL Server urls OpenAPI Specification respecting pattern scheme://host:port/path. api* options ignored set. plumber.apiScheme Scheme used build OpenAPI url server url OpenAPI Specification. Defaults http, empty string used outside running router. plumber.apiHost Host used build docs url server url OpenAPI Specification. Defaults host defined run method, empty string used outside running router. plumber.apiPort Port used build OpenAPI url server url OpenAPI Specification. Defaults port defined run method, empty string used outside running router. plumber.apiPath Path used build OpenAPI url server url OpenAPI Specification. Defaults empty string. plumber.maxRequestSize Maximum length bytes request body. Body larger maximum rejected http error 413. 0 means unlimited size. Defaults 0. plumber.sharedSecret Shared secret used filter incoming request. NULL, secret validated. Otherwise, Plumber compares secret http header PLUMBER_SHARED_SECRET. Failure match results http error 400. Defaults NULL. plumber.legacyRedirects Plumber redirect legacy route /__swagger__/ /__swagger__/index.html ../__docs__/ ../__docs__/index.html. can disable settings option FALSE. Defaults TRUE","code":""},{"path":"https://www.rplumber.io/reference/parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plumber Parsers — parser_form","title":"Plumber Parsers — parser_form","text":"Parsers used Plumber transform request body received API. Extra parameters may provided parser functions enabling router. allow non-default behavior.","code":""},{"path":"https://www.rplumber.io/reference/parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Parsers — parser_form","text":"","code":"parser_form()  parser_json(...)  parser_geojson(...)  parser_text(parse_fn = identity)  parser_yaml(...)  parser_csv(...)  parser_tsv(...)  parser_read_file(read_fn = readLines)  parser_rds(...)  parser_feather(...)  parser_parquet(...)  parser_octet()  parser_multi()  parser_none()"},{"path":"https://www.rplumber.io/reference/parsers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Parsers — parser_form","text":"... parameters supplied appropriate internal function parse_fn function decode text string object read_fn function used read content file. Ex: readRDS()","code":""},{"path":"https://www.rplumber.io/reference/parsers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plumber Parsers — parser_form","text":"Parsers optional. unspecified, default endpoint parsers enabled. can use @parser NAME tag enable parser endpoint. Multiple parsers can enabled endpoint using multiple @parser NAME tags. User aware rds parsing done trusted source. accept rds files blindly. See registered_parsers() list registered parsers names.","code":""},{"path":"https://www.rplumber.io/reference/parsers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plumber Parsers — parser_form","text":"parser_form(): Form query string parser parser_json(): JSON parser. See jsonlite::parse_json() details. (Defaults using simplifyVectors = TRUE) parser_geojson(): GeoJSON parser. See geojsonsf::geojson_sf() details. parser_text(): Helper parser parse plain text parser_yaml(): YAML parser. See yaml::yaml.load() details. parser_csv(): CSV parser. See readr::read_csv() details. parser_tsv(): TSV parser. See readr::read_tsv() details. parser_read_file(): Helper parser writes binary body file reads back using read_fn. parser used reading file required. parser_rds(): RDS parser. See readRDS() details. parser_feather(): feather parser. See arrow::read_feather() details. parser_parquet(): parquet parser. See arrow::read_parquet() details. parser_octet(): Octet stream parser. Returns raw content. parser_multi(): Multi part parser. parser parse individual body respective parser.  parser used, req$body contain updated output webutils::parse_multipart() adding parsed output part.  part may contain detailed information, name (required), content_type, content_disposition, filename, (raw, original) value, parsed (parsed value).  performing Plumber route argument matching, multipart part match name parsed content. parser_none(): parser. process postBody.","code":""},{"path":"https://www.rplumber.io/reference/parsers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plumber Parsers — parser_form","text":"","code":"if (FALSE) { # \\dontrun{ # Overwrite `text/json` parsing behavior to not allow JSON vectors to be simplified #* @parser json list(simplifyVector = FALSE) # Activate `rds` parser in a multipart request #* @parser multi #* @parser rds pr <- Plumber$new() pr$handle(\"GET\", \"/upload\", function(rds) {rds}, parsers = c(\"multi\", \"rds\")) } # }"},{"path":"https://www.rplumber.io/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://www.rplumber.io/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://www.rplumber.io/reference/plumb.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a Plumber API — plumb","title":"Process a Plumber API — plumb","text":"Process Plumber API","code":""},{"path":"https://www.rplumber.io/reference/plumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a Plumber API — plumb","text":"","code":"plumb(file = NULL, dir = \".\")"},{"path":"https://www.rplumber.io/reference/plumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a Plumber API — plumb","text":"file file parse plumber router definition. dir directory containing plumber.R file parse plumber router definition. Alternatively, entrypoint.R file found, take precedence responsible returning runnable router.","code":""},{"path":"https://www.rplumber.io/reference/plumb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a Plumber API — plumb","text":"API routers core request handler plumber. router responsible taking incoming request, submitting appropriate filters eventually corresponding endpoint, one found. See Programmatic Usage article additional details methods available object.","code":""},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a Package's Plumber API — plumb_api","title":"Process a Package's Plumber API — plumb_api","text":"packages can ship multiple plumber routers, users store Plumber APIs inst subfolder plumber (./inst/plumber/API_1/plumber.R).","code":""},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a Package's Plumber API — plumb_api","text":"","code":"plumb_api(package = NULL, name = NULL, edit = FALSE)  available_apis(package = NULL)"},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a Package's Plumber API — plumb_api","text":"package Package inspect name Name package folder plumb(). edit Whether open API source code viewing / editing","code":""},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a Package's Plumber API — plumb_api","text":"Plumber object. either package name null, appropriate available_apis() returned.","code":""},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a Package's Plumber API — plumb_api","text":"view available Plumber APIs across packages, please call available_apis(). package value may provided display particular package's Plumber APIs.","code":""},{"path":"https://www.rplumber.io/reference/plumb_api.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Process a Package's Plumber API — plumb_api","text":"plumb_api(): plumb()s package's Plumber API. Returns Plumber router object available_apis(): Displays available package Plumber APIs. Returns data.frame package, name, source_directory information.","code":""},{"path":"https://www.rplumber.io/reference/pr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Plumber router — pr","title":"Create a new Plumber router — pr","text":"Create new Plumber router","code":""},{"path":"https://www.rplumber.io/reference/pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Plumber router — pr","text":"","code":"pr(   file = NULL,   filters = defaultPlumberFilters,   envir = new.env(parent = .GlobalEnv) )"},{"path":"https://www.rplumber.io/reference/pr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Plumber router — pr","text":"file Path file plumb filters list Plumber filters envir environment used enclosure routers execution","code":""},{"path":"https://www.rplumber.io/reference/pr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Plumber router — pr","text":"new Plumber router","code":""},{"path":"https://www.rplumber.io/reference/pr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Plumber router — pr","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Store session data in encrypted cookies. — pr_cookie","title":"Store session data in encrypted cookies. — pr_cookie","text":"plumber uses crypto R package sodium, encrypt/decrypt req$session information server request.","code":""},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store session data in encrypted cookies. — pr_cookie","text":"","code":"pr_cookie(   pr,   key,   name = \"plumber\",   expiration = FALSE,   http = TRUE,   secure = FALSE,   same_site = FALSE,   path = NULL )"},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store session data in encrypted cookies. — pr_cookie","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. key secret key use. must consistent across R sessions want save/restore encrypted cookies. produced using random_cookie_key. Please see \"Storing secure keys\" section details complex character string bolster security. name name cookie user's browser. expiration number representing number seconds future cookie expires POSIXt date object cookie expires. Defaults end user's browser session. http Boolean adds HttpOnly cookie flag tells browser save cookie send client-side scripts. mitigates cross-site scripting. Defaults TRUE. secure Boolean adds Secure cookie flag.  set route eventually delivered HTTPS. same_site character specifying SameSite policy attach cookie. specified, one following values given: \"Strict\", \"Lax\", \"None\". \"None\" specified, secure flag MUST also set modern browsers accept cookie. error returned same_site = \"None\" secure = FALSE. specified non-character given, SameSite policy attached cookie. path URI path cookie available future requests. Defaults request URI. Set \"/\" make cookie available requests host.","code":""},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store session data in encrypted cookies. — pr_cookie","text":"cookie's secret encryption key value must consistent maintain req$session information server restarts.","code":""},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":"storing-secure-keys","dir":"Reference","previous_headings":"","what":"Storing secure keys","title":"Store session data in encrypted cookies. — pr_cookie","text":"quick get started user session cookies using plumber, please exercise precaution storing secure key information. malicious person gain access secret key, able eavesdrop req$session information /tamper req$session information processed. Please: store keys source control. store keys disk permissions allow accessed everyone. store keys databases can queried everyone. Instead, please: Use key management system, 'keyring' (preferred) Store secret file disk appropriately secure permissions, \"user read \" (Sys.chmod(\"myfile.txt\", mode = \"0600\")), prevent others reading . Examples solutions done Examples section.","code":""},{"path":[]},{"path":"https://www.rplumber.io/reference/pr_cookie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store session data in encrypted cookies. — pr_cookie","text":"","code":"if (FALSE) { # \\dontrun{  ## Set secret key using `keyring` (preferred method) keyring::key_set_with_value(\"plumber_api\", password = plumber::random_cookie_key())   pr() %>%   pr_cookie(     keyring::key_get(\"plumber_api\"),     name = \"counter\"   ) %>%   pr_get(\"/sessionCounter\", function(req) {     count <- 0     if (!is.null(req$session$counter)){       count <- as.numeric(req$session$counter)     }     req$session$counter <- count + 1     return(paste0(\"This is visit #\", count))   }) %>%   pr_run()   #### -------------------------------- ###   ## Save key to a local file pswd_file <- \"normal_file.txt\" cat(plumber::random_cookie_key(), file = pswd_file) # Make file read-only Sys.chmod(pswd_file, mode = \"0600\")  pr() %>%   pr_cookie(     readLines(pswd_file, warn = FALSE),     name = \"counter\"   ) %>%   pr_get(\"/sessionCounter\", function(req) {     count <- 0     if (!is.null(req$session$counter)){       count <- as.numeric(req$session$counter)     }     req$session$counter <- count + 1     return(paste0(\"This is visit #\", count))   }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a filter to Plumber router — pr_filter","title":"Add a filter to Plumber router — pr_filter","text":"Filters can used modify incoming request, return error, return response prior request reaching endpoint.","code":""},{"path":"https://www.rplumber.io/reference/pr_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a filter to Plumber router — pr_filter","text":"","code":"pr_filter(pr, name, expr, serializer)"},{"path":"https://www.rplumber.io/reference/pr_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a filter to Plumber router — pr_filter","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. name character string. Name filter expr expr resolve filter function filter function serializer serializer function","code":""},{"path":"https://www.rplumber.io/reference/pr_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a filter to Plumber router — pr_filter","text":"Plumber router defined filter added","code":""},{"path":"https://www.rplumber.io/reference/pr_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a filter to Plumber router — pr_filter","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_filter(\"foo\", function(req, res) {     print(\"This is filter foo\")     forward()   }) %>%   pr_get(\"/hi\", function() \"Hello\") %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Add handler to Plumber router — pr_handle","title":"Add handler to Plumber router — pr_handle","text":"collection functions creates handlers Plumber router.","code":""},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add handler to Plumber router — pr_handle","text":"","code":"pr_handle(pr, methods, path, handler, preempt, serializer, endpoint, ...)  pr_get(pr, path, handler, preempt, serializer, endpoint, ...)  pr_post(pr, path, handler, preempt, serializer, endpoint, ...)  pr_put(pr, path, handler, preempt, serializer, endpoint, ...)  pr_delete(pr, path, handler, preempt, serializer, endpoint, ...)  pr_head(pr, path, handler, preempt, serializer, endpoint, ...)"},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add handler to Plumber router — pr_handle","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. methods Character vector HTTP methods path endpoint path handler handler function preempt preempt function serializer Plumber serializer endpoint PlumberEndpoint object ... Additional arguments PlumberEndpoint","code":""},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add handler to Plumber router — pr_handle","text":"Plumber router handler added","code":""},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add handler to Plumber router — pr_handle","text":"generic pr_handle() creates handle given method(s). Specific functions implemented following HTTP methods: GET POST PUT DELETE HEAD function mutates Plumber router place returns updated router.","code":""},{"path":"https://www.rplumber.io/reference/pr_handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add handler to Plumber router — pr_handle","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_handle(\"GET\", \"/hi\", function() \"Hello World\") %>%   pr_run()  pr() %>%   pr_handle(c(\"GET\", \"POST\"), \"/hi\", function() \"Hello World\") %>%   pr_run()  pr() %>%   pr_get(\"/hi\", function() \"Hello World\") %>%   pr_post(\"/echo\", function(req, res) {     if (is.null(req$body)) return(\"No input\")     list(       input = req$body     )   }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a hook — pr_hook","title":"Register a hook — pr_hook","text":"Plumber routers support notion \"hooks\" can registered execute code particular point lifecycle request. Plumber routers currently support four hooks: preroute(data, req, res) postroute(data, req, res, value) preserialize(data, req, res, value) postserialize(data, req, res, value) access disposable environment data parameter created temporary data store request. Hooks can store temporary data hooks can reused hooks processing request.","code":""},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a hook — pr_hook","text":"","code":"pr_hook(pr, stage, handler)  pr_hooks(pr, handlers)"},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a hook — pr_hook","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. stage character string. Point lifecycle request. handler hook function. handlers named list hook handlers","code":""},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a hook — pr_hook","text":"Plumber router defined hook(s) added","code":""},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a hook — pr_hook","text":"One feature defining hooks Plumber routers ability modify returned value. convention hooks : function accepts parameter named value expected return new value. unmodified version value passed , mutated value. either case, hook accepts parameter named value, whatever hook returns used new value response. can add hooks using pr_hook, can add multiple hooks using pr_hooks, takes named list names names hooks, values handlers .","code":""},{"path":"https://www.rplumber.io/reference/pr_hook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a hook — pr_hook","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_hook(\"preroute\", function(req){     cat(\"Routing a request for\", req$PATH_INFO, \"...\\n\")   }) %>%   pr_hooks(list(     preserialize = function(req, value){       print(\"About to serialize this value:\")       print(value)        # Must return the value since we took one in. Here we're not choosing       # to mutate it, but we could.       value     },     postserialize = function(res){       print(\"We serialized the value as:\")       print(res$body)     }   )) %>%   pr_handle(\"GET\", \"/\", function(){ 123 }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_mount.html","id":null,"dir":"Reference","previous_headings":"","what":"Mount a Plumber router — pr_mount","title":"Mount a Plumber router — pr_mount","text":"Plumber routers can “nested” mounting one another using mount() method. allows compartmentalize API paths great technique decomposing large APIs smaller files. function mutates Plumber router (pr()) place returns updated router.","code":""},{"path":"https://www.rplumber.io/reference/pr_mount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mount a Plumber router — pr_mount","text":"","code":"pr_mount(pr, path, router)"},{"path":"https://www.rplumber.io/reference/pr_mount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mount a Plumber router — pr_mount","text":"pr host Plumber router. path character string. mount router. router Plumber router. Router mounted.","code":""},{"path":"https://www.rplumber.io/reference/pr_mount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mount a Plumber router — pr_mount","text":"Plumber router supplied router mounted","code":""},{"path":"https://www.rplumber.io/reference/pr_mount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mount a Plumber router — pr_mount","text":"","code":"if (FALSE) { # \\dontrun{ pr1 <- pr() %>%   pr_get(\"/hello\", function() \"Hello\")  pr() %>%   pr_get(\"/goodbye\", function() \"Goodbye\") %>%   pr_mount(\"/hi\", pr1) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a server using plumber object — pr_run","title":"Start a server using plumber object — pr_run","text":"port need explicitly assigned.","code":""},{"path":"https://www.rplumber.io/reference/pr_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a server using plumber object — pr_run","text":"","code":"pr_run(   pr,   host = \"127.0.0.1\",   port = get_option_or_env(\"plumber.port\", NULL),   ...,   debug = missing_arg(),   docs = missing_arg(),   swaggerCallback = missing_arg(),   quiet = FALSE )"},{"path":"https://www.rplumber.io/reference/pr_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a server using plumber object — pr_run","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. host string valid IPv4 IPv6 address owned server, application listen . \"0.0.0.0\" represents IPv4 addresses \"::/0\" represents IPv6 addresses. port number integer indicates server port listened . Note Unix-like systems including Linux Mac OS X, port numbers smaller 1025 require root privileges. ... empty. debug TRUE, provide insight API errors. Using value last duration run. pr_set_debug() called, debug default interactive() pr_run() time docs Visual documentation value use running API. value used running router. missing, defaults information previously set pr_set_docs(). customization, see pr_set_docs() examples. swaggerCallback optional single-argument function called back URL OpenAPI user interface one becomes ready. missing, defaults information set pr_set_docs_callback(). value used running router. quiet TRUE, print routine startup messages.","code":""},{"path":"https://www.rplumber.io/reference/pr_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a server using plumber object — pr_run","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_run()  pr() %>%   pr_run(     # manually set port     port = 5762,     # turn off visual documentation     docs = FALSE,     # do not display startup messages     quiet = TRUE   ) } # }"},{"path":"https://www.rplumber.io/reference/pr_set_404.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the handler that is called when the incoming request can't be served — pr_set_404","title":"Set the handler that is called when the incoming request can't be served — pr_set_404","text":"function allows custom error message returned request served existing endpoint filter.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_404.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the handler that is called when the incoming request can't be served — pr_set_404","text":"","code":"pr_set_404(pr, fun)"},{"path":"https://www.rplumber.io/reference/pr_set_404.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the handler that is called when the incoming request can't be served — pr_set_404","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. fun handler function","code":""},{"path":"https://www.rplumber.io/reference/pr_set_404.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the handler that is called when the incoming request can't be served — pr_set_404","text":"Plumber router modified 404 handler","code":""},{"path":"https://www.rplumber.io/reference/pr_set_404.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the handler that is called when the incoming request can't be served — pr_set_404","text":"","code":"if (FALSE) { # \\dontrun{ handler_404 <- function(req, res) {   res$status <- 404   res$body <- \"Oops\" }  pr() %>%   pr_get(\"/hi\", function() \"Hello\") %>%   pr_set_404(handler_404) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the OpenAPI Specification — pr_set_api_spec","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"Allows modify OpenAPI Specification autogenerated plumber.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"","code":"pr_set_api_spec(pr, api)"},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. api can OpenAPI Specification formatted list object function accepts OpenAPI Specification autogenerated plumber returns OpenAPI Specification formatted list object. path OpenAPI Specification value returned validated OAS compatibility.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"Plumber router new OpenAPI Specification object function.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"Note, returned value sent serializer_unboxed_json() turn length 1 vectors atomic values. force vector serialize array size 1, sure call .list() value. list() objects always serialized array value.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_api_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the OpenAPI Specification — pr_set_api_spec","text":"","code":"if (FALSE) { # \\dontrun{ # Set the API Spec to a function to use the auto-generated OAS object pr() %>%   pr_set_api_spec(function(spec) {     spec$info$title <- Sys.time()     spec   }) %>%   pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%   pr_run()  # Set the API Spec using an object pr() %>%   pr_set_api_spec(my_custom_object) %>%   pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_set_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Set debug value to include error messages of routes cause an error — pr_set_debug","title":"Set debug value to include error messages of routes cause an error — pr_set_debug","text":"default, error messages plumber routes hidden, can turned setting debug value TRUE using setter.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set debug value to include error messages of routes cause an error — pr_set_debug","text":"","code":"pr_set_debug(pr, debug = FALSE)"},{"path":"https://www.rplumber.io/reference/pr_set_debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set debug value to include error messages of routes cause an error — pr_set_debug","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. debug TRUE provides insight API errors.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_debug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set debug value to include error messages of routes cause an error — pr_set_debug","text":"Plumber router new debug setting.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_debug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set debug value to include error messages of routes cause an error — pr_set_debug","text":"","code":"if (FALSE) { # \\dontrun{ # Will contain the original error message pr() %>%   pr_set_debug(TRUE) %>%   pr_get(\"/boom\", function() stop(\"boom\")) %>%   pr_run()  # Will NOT contain an error message pr() %>%   pr_set_debug(FALSE) %>%   pr_get(\"/boom\", function() stop(\"boom\")) %>%   pr_run() } # }  # Setting within a plumber file #* @plumber function(pr) {   pr %>%     pr_set_debug(TRUE) } #> function (pr)  #> { #>     pr %>% pr_set_debug(TRUE) #> } #> <environment: 0x5594bfe0d730>"},{"path":"https://www.rplumber.io/reference/pr_set_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the API visual documentation — pr_set_docs","title":"Set the API visual documentation — pr_set_docs","text":"docs either logical character value matching registered visual documentation. Multiple handles added Plumber object. OpenAPI json file served paths /openapi.json. Documentation served paths /__docs__/index.html /__docs__/.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the API visual documentation — pr_set_docs","text":"","code":"pr_set_docs(pr, docs = get_option_or_env(\"plumber.docs\", TRUE), ...)"},{"path":"https://www.rplumber.io/reference/pr_set_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the API visual documentation — pr_set_docs","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. docs character value logical value. using options_plumber(), value must set initializing Plumber router. ... Arguments visual documentation. See visual documentation package details.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the API visual documentation — pr_set_docs","text":"Plumber router new docs settings.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the API visual documentation — pr_set_docs","text":"","code":"if (FALSE) { # \\dontrun{ ## View API using Swagger UI # Official Website: https://swagger.io/tools/swagger-ui/ # install.packages(\"swagger\") if (require(swagger)) {   pr() %>%     pr_set_docs(\"swagger\") %>%     pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%     pr_run() }  ## View API using Redoc # Official Website: https://github.com/Redocly/redoc if (require(redoc)) {   pr() %>%     pr_set_docs(\"redoc\") %>%     pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%     pr_run() }  ## View API using RapiDoc # Official Website: https://github.com/mrin9/RapiDoc if (require(rapidoc)) {   pr() %>%     pr_set_docs(\"rapidoc\") %>%     pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%     pr_run() }  ## Disable the OpenAPI Spec UI pr() %>%   pr_set_docs(FALSE) %>%   pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"set, called character string corresponding API visual documentation url. allows RStudio locate visual documentation.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"","code":"pr_set_docs_callback(   pr,   callback = get_option_or_env(\"plumber.docs.callback\", NULL) )"},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. callback callback function taking action docs url.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"Plumber router new docs callback setting.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"using options_plumber(), value must set initializing Plumber router.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_docs_callback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the callback to tell where the API visual documentation is located — pr_set_docs_callback","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_set_docs_callback(function(url) { message(\"API location: \", url) }) %>%   pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_set_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","title":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","text":"Set error handler invoked filter endpoint generates error","code":""},{"path":"https://www.rplumber.io/reference/pr_set_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","text":"","code":"pr_set_error(pr, fun)"},{"path":"https://www.rplumber.io/reference/pr_set_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. fun error handler function. accept req, res, error value","code":""},{"path":"https://www.rplumber.io/reference/pr_set_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","text":"Plumber router modified error handler","code":""},{"path":"https://www.rplumber.io/reference/pr_set_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the error handler that is invoked if any filter or endpoint generates an error — pr_set_error","text":"","code":"if (FALSE) { # \\dontrun{ handler_error <- function(req, res, err){   res$status <- 500   list(error = \"Custom Error Message\") }  pr() %>%   pr_get(\"/error\", function() log(\"a\")) %>%   pr_set_error(handler_error) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/pr_set_parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default endpoint parsers for the router — pr_set_parsers","title":"Set the default endpoint parsers for the router — pr_set_parsers","text":"default, Plumber parse JSON, text, query strings, octet streams, multipart bodies. function updates default parsers endpoint define parsers.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default endpoint parsers for the router — pr_set_parsers","text":"","code":"pr_set_parsers(pr, parsers)"},{"path":"https://www.rplumber.io/reference/pr_set_parsers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default endpoint parsers for the router — pr_set_parsers","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. parsers Can one : NULL value character vector parser names named list() whose keys parser names names values arguments applied .call() TRUE value, default combining parsers. great seeing possible, great security purposes parser name \"\" found character value list name, remaining parsers added. using list, parser information already defined maintain existing argument values.  remaining parsers use default arguments. Example:","code":"# provide a character string parsers = \"json\"  # provide a named list with no arguments parsers = list(json = list())  # provide a named list with arguments; include `rds` parsers = list(json = list(simplifyVector = FALSE), rds = list())  # default plumber parsers parsers = c(\"json\", \"form\", \"text\", \"octet\", \"multi\")"},{"path":"https://www.rplumber.io/reference/pr_set_parsers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the default endpoint parsers for the router — pr_set_parsers","text":"Plumber router new default PlumberEndpoint parsers","code":""},{"path":"https://www.rplumber.io/reference/pr_set_parsers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the default endpoint parsers for the router — pr_set_parsers","text":"Note: default set parsers completely replaced value supplied. sure include parsers like include. Use registered_parsers() get list available parser names.","code":""},{"path":"https://www.rplumber.io/reference/pr_set_serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default serializer of the router — pr_set_serializer","title":"Set the default serializer of the router — pr_set_serializer","text":"default, Plumber serializes responses JSON. function updates default serializer function supplied via serializer","code":""},{"path":"https://www.rplumber.io/reference/pr_set_serializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default serializer of the router — pr_set_serializer","text":"","code":"pr_set_serializer(pr, serializer)"},{"path":"https://www.rplumber.io/reference/pr_set_serializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default serializer of the router — pr_set_serializer","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. serializer serializer function","code":""},{"path":"https://www.rplumber.io/reference/pr_set_serializer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the default serializer of the router — pr_set_serializer","text":"Plumber router new default serializer","code":""},{"path":"https://www.rplumber.io/reference/pr_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a static route to the plumber object — pr_static","title":"Add a static route to the plumber object — pr_static","text":"Add static route plumber object","code":""},{"path":"https://www.rplumber.io/reference/pr_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a static route to the plumber object — pr_static","text":"","code":"pr_static(pr, path, direc)"},{"path":"https://www.rplumber.io/reference/pr_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a static route to the plumber object — pr_static","text":"pr Plumber API. Note: supplied Plumber API object also updated place well returned function. path mounted path location static folder direc local folder served statically","code":""},{"path":"https://www.rplumber.io/reference/pr_static.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a static route to the plumber object — pr_static","text":"","code":"if (FALSE) { # \\dontrun{ pr() %>%   pr_static(\"/path\", \"./my_folder/location\") %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/random_cookie_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Random cookie key generator — random_cookie_key","title":"Random cookie key generator — random_cookie_key","text":"Uses cryptographically secure pseudorandom number generator sodium::helpers() generate 64 digit hexadecimal string.  'sodium' wraps around 'libsodium'.","code":""},{"path":"https://www.rplumber.io/reference/random_cookie_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random cookie key generator — random_cookie_key","text":"","code":"random_cookie_key()"},{"path":"https://www.rplumber.io/reference/random_cookie_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random cookie key generator — random_cookie_key","text":"64 digit hexadecimal string used key cookie encryption.","code":""},{"path":"https://www.rplumber.io/reference/random_cookie_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random cookie key generator — random_cookie_key","text":"Please see session_cookie information save generated key.","code":""},{"path":[]},{"path":"https://www.rplumber.io/reference/register_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add visual documentation for plumber to use — register_docs","title":"Add visual documentation for plumber to use — register_docs","text":"register_docs() used packages like swagger, rapidoc, redoc. load packages, calls register_docs() provide user interface can interpret plumber OpenAPI Specifications.","code":""},{"path":"https://www.rplumber.io/reference/register_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add visual documentation for plumber to use — register_docs","text":"","code":"register_docs(name, index, static = NULL)  registered_docs()"},{"path":"https://www.rplumber.io/reference/register_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add visual documentation for plumber to use — register_docs","text":"name Name visual documentation index function returns HTML content landing page documentation. Parameters (besides req res) supplied regular GET route. Default parameter values may used setting documentation index function. See example . static function returns path static assets (images, javascript, css, fonts) Docs use.","code":""},{"path":"https://www.rplumber.io/reference/register_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add visual documentation for plumber to use — register_docs","text":"","code":"if (FALSE) { # \\dontrun{ # Example from the `swagger` R package register_docs(   name = \"swagger\",   index = function(version = \"3\", ...) {     swagger::swagger_spec(       api_path = paste0(         \"window.location.origin + \",         \"window.location.pathname.replace(\",           \"/\\\\(__docs__\\\\\\\\/|__docs__\\\\\\\\/index.html\\\\)$/, \\\"\\\"\",         \") + \",         \"\\\"openapi.json\\\"\"       ),       version = version     )   },   static = function(version = \"3\", ...) {     swagger::swagger_path(version)   } )  # When setting the docs, `index` and `static` function arguments can be supplied # * via `pr_set_docs()` # * or through URL query string variables pr() %>%   # Set default argument `version = \"3\"` for the swagger `index` and `static` functions   pr_set_docs(\"swagger\", version = \"3\") %>%   pr_get(\"/plus/<a:int>/<b:int>\", function(a, b) { a + b }) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/register_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage parsers — register_parser","title":"Manage parsers — register_parser","text":"parser responsible decoding raw body content request list arguments can mapped endpoint function arguments. instance, parser_json() parse content-type application/json.","code":""},{"path":"https://www.rplumber.io/reference/register_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage parsers — register_parser","text":"","code":"register_parser(alias, parser, fixed = NULL, regex = NULL, verbose = TRUE)  registered_parsers()"},{"path":"https://www.rplumber.io/reference/register_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage parsers — register_parser","text":"alias alias map parser @parser plumber tag global parsers list. parser parser function added. build parser function. See Details information. fixed character vector fixed string matched request content-type use parser. regex character vector regex string matched request content-type use parser. verbose Logical value determines warning displayed alias map overwritten.","code":""},{"path":"https://www.rplumber.io/reference/register_parser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage parsers — register_parser","text":"parser evaluated, return parser function. Parser matching done first content-type header matching fixed using regular expressions regex. Note plumber strips ; charset* content-type header matching. Plumber try use parser_json() (available) content-type header found request body starts { [. Functions signature include value, ... possibly content_type, filename. parameters may provided want use headers webutils::parse_multipart(). Parser function structure something like .","code":"function(parser_arguments_here) {   # return a function to parse a raw value   function(value, ...) {     # do something with raw value   } }"},{"path":"https://www.rplumber.io/reference/register_parser.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage parsers — register_parser","text":"registered_parsers(): Return registered parsers","code":""},{"path":"https://www.rplumber.io/reference/register_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage parsers — register_parser","text":"","code":"# `content-type` header is mostly used to look up charset and adjust encoding parser_dcf <- function(...) {   function(value, content_type = \"text/x-dcf\", ...) {     charset <- get_character_set(content_type)     value <- rawToChar(value)     Encoding(value) <- charset     read.dcf(value, ...)   } }  # Could also leverage existing parsers parser_dcf <- function(...) {   parser_read_file(function(tmpfile) {     read.dcf(tmpfile, ...)   }) }  # Register the newly created parser if (FALSE) register_parser(\"dcf\", parser_dcf, fixed = \"text/x-dcf\") # \\dontrun{}"},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Serializer — register_serializer","title":"Register a Serializer — register_serializer","text":"serializer responsible translating generated R value output remote user can understand. instance, serializer_json serializes R objects JSON returning user. list available serializers plumber global.","code":""},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Serializer — register_serializer","text":"","code":"register_serializer(name, serializer, verbose = TRUE)  registered_serializers()"},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Serializer — register_serializer","text":"name name serializer (character string) serializer serializer function added. function accept arguments can supplied plumb()ing file. function return function accepts four arguments: value, req, res, errorHandler. See print(serializer_json) example. verbose Logical value determines message printed overwriting serializers","code":""},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a Serializer — register_serializer","text":"three main building-block serializers: serializer_headers: base building-block serializer required as_attachment() work serializer_content_type(): setting content type. (Calls serializer_headers()) serializer_device(): add endpoint hooks turn graphics device addition setting content type. (Uses serializer_content_type())","code":""},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Register a Serializer — register_serializer","text":"register_serializer(): Register serializer name registered_serializers(): Return list registered serializers","code":""},{"path":"https://www.rplumber.io/reference/register_serializer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Serializer — register_serializer","text":"","code":"# `serializer_json()` calls `serializer_content_type()` and supplies a serialization function print(serializer_json) #> function (..., type = \"application/json\")  #> { #>     serializer_content_type(type, function(val) { #>         toJSON(val, ...) #>     }) #> } #> <bytecode: 0x5594bbc2a288> #> <environment: namespace:plumber> # serializer_content_type() calls `serializer_headers()` and supplies a serialization function print(serializer_content_type) #> function (type, serialize_fn = identity)  #> { #>     if (missing(type)) { #>         stop(\"You must provide the custom content type to the serializer_content_type\") #>     } #>     stopifnot(length(type) == 1) #>     stopifnot(is.character(type)) #>     stopifnot(nchar(type) > 0) #>     serializer_headers(list(`Content-Type` = type), serialize_fn) #> } #> <bytecode: 0x5594bbc196e0> #> <environment: namespace:plumber>"},{"path":"https://www.rplumber.io/reference/serializers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plumber Serializers — serializer_headers","title":"Plumber Serializers — serializer_headers","text":"Serializers used Plumber transform R object produced filter/endpoint HTTP response can returned client. See details Plumber serializers customize behavior.","code":""},{"path":"https://www.rplumber.io/reference/serializers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plumber Serializers — serializer_headers","text":"","code":"serializer_headers(headers = list(), serialize_fn = identity)  serializer_content_type(type, serialize_fn = identity)  serializer_octet(..., type = \"application/octet-stream\")  serializer_csv(..., type = \"text/csv; charset=UTF-8\")  serializer_tsv(..., type = \"text/tab-separated-values; charset=UTF-8\")  serializer_html(type = \"text/html; charset=UTF-8\")  serializer_json(..., type = \"application/json\")  serializer_unboxed_json(auto_unbox = TRUE, ..., type = \"application/json\")  serializer_geojson(..., type = \"application/geo+json\")  serializer_rds(version = \"2\", ascii = FALSE, ..., type = \"application/rds\")  serializer_feather(type = \"application/vnd.apache.arrow.file\")  serializer_parquet(type = \"application/vnd.apache.parquet\")  serializer_yaml(..., type = \"text/x-yaml; charset=UTF-8\")  serializer_text(   ...,   serialize_fn = as.character,   type = \"text/plain; charset=UTF-8\" )  serializer_format(..., type = \"text/plain; charset=UTF-8\")  serializer_print(..., type = \"text/plain; charset=UTF-8\")  serializer_cat(..., type = \"text/plain; charset=UTF-8\")  serializer_write_file(type, write_fn, fileext = NULL)  serializer_htmlwidget(..., type = \"text/html; charset=UTF-8\")  serializer_device(type, dev_on, dev_off = grDevices::dev.off)  serializer_jpeg(..., type = \"image/jpeg\")  serializer_png(..., type = \"image/png\")  serializer_svg(..., type = \"image/svg+xml\")  serializer_bmp(..., type = \"image/bmp\")  serializer_tiff(..., type = \"image/tiff\")  serializer_pdf(..., type = \"application/pdf\")  serializer_agg_jpeg(..., type = \"image/jpeg\")  serializer_agg_png(..., type = \"image/png\")  serializer_agg_tiff(..., type = \"image/tiff\")  serializer_svglite(..., type = \"image/svg+xml\")"},{"path":"https://www.rplumber.io/reference/serializers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plumber Serializers — serializer_headers","text":"headers list() headers add response object serialize_fn Function serialize data. result object converted character string. Ex: jsonlite::toJSON(). type value provide Content-Type HTTP header. ... extra arguments supplied respective internal serialization function. auto_unbox automatically unbox() atomic vectors length 1. usually safer avoid instead use unbox() function unbox individual elements. exception objects class AsIs (.e. wrapped ()) automatically unboxed. way mark single values length-1 arrays. version workspace format version use.  NULL     specifies current default version (3). supported     value 2, default R 1.4.0 R 3.5.0. ascii logical.  TRUE NA, ASCII     representation written; otherwise (default) binary one.     See also comments help save. write_fn Function write serialized content temp file provided. write_fn function signature function(value, tmp_file){}. fileext non-empty character vector giving file extension. value try inferred content type provided. dev_on Function turn graphics device. graphics device dev_on function receive arguments supplied serializer addition filename. filename points temporary file name used saving content. dev_off Function turn graphics device. Defaults grDevices::dev.()","code":""},{"path":"https://www.rplumber.io/reference/serializers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plumber Serializers — serializer_headers","text":"serializer_headers(): Add static list headers return value. add Content-Disposition header value result as_attachment(). serializer_content_type(): Adds Content-Type header response object serializer_octet(): Octet serializer. content received \"raw\" type, error thrown. serializer_csv(): CSV serializer. See also: readr::format_csv() serializer_tsv(): TSV serializer. See also: readr::format_tsv() serializer_html(): HTML serializer serializer_json(): JSON serializer. See also: jsonlite::toJSON() serializer_unboxed_json(): JSON serializer auto_unbox defaulting TRUE. See also: jsonlite::toJSON() serializer_geojson(): GeoJSON serializer. See also geojsonsf::sf_geojson() [geojsonsf::sfc_geojson()]. serializer_rds(): RDS serializer. See also: base::serialize() serializer_feather(): feather serializer. See also: arrow::write_feather() serializer_parquet(): parquet serializer. See also: arrow::write_parquet() serializer_yaml(): YAML serializer. See also: yaml::.yaml() serializer_text(): Text serializer. See also: .character() serializer_format(): Text serializer. See also: format() serializer_print(): Text serializer. Captures output print() serializer_cat(): Text serializer. Captures output cat() serializer_write_file(): Write output temp file whose contents read back serialized response. serializer_write_file() creates (cleans ) temp file, calls serializer (write temp file), reads contents back serialized value.  content type starts \"text\", return result read character string, otherwise result returned raw vector. serializer_htmlwidget(): htmlwidget serializer. See also: htmlwidgets::saveWidget() serializer_device(): Helper method create graphics device serializers, serializer_png(). See also: endpoint_serializer() serializer_jpeg(): JPEG image serializer. See also: grDevices::jpeg() serializer_png(): PNG image serializer. See also: grDevices::png() serializer_svg(): SVG image serializer. See also: grDevices::svg() serializer_bmp(): BMP image serializer. See also: grDevices::bmp() serializer_tiff(): TIFF image serializer. See also: grDevices::tiff() serializer_pdf(): PDF image serializer. See also: grDevices::pdf() serializer_agg_jpeg(): JPEG image serializer using ragg. See also: ragg::agg_jpeg() serializer_agg_png(): PNG image serializer using ragg. See also: ragg::agg_png() serializer_agg_tiff(): TIFF image serializer using ragg. See also: ragg::agg_tiff() serializer_svglite(): SVG image serializer using svglite. See also: svglite::svglite()","code":""},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Store session data in encrypted cookies. — session_cookie","title":"Store session data in encrypted cookies. — session_cookie","text":"plumber uses crypto R package sodium, encrypt/decrypt req$session information server request.","code":""},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store session data in encrypted cookies. — session_cookie","text":"","code":"session_cookie(   key,   name = \"plumber\",   expiration = FALSE,   http = TRUE,   secure = FALSE,   same_site = FALSE,   path = NULL )"},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store session data in encrypted cookies. — session_cookie","text":"key secret key use. must consistent across R sessions want save/restore encrypted cookies. produced using random_cookie_key. Please see \"Storing secure keys\" section details complex character string bolster security. name name cookie user's browser. expiration number representing number seconds future cookie expires POSIXt date object cookie expires. Defaults end user's browser session. http Boolean adds HttpOnly cookie flag tells browser save cookie send client-side scripts. mitigates cross-site scripting. Defaults TRUE. secure Boolean adds Secure cookie flag.  set route eventually delivered HTTPS. same_site character specifying SameSite policy attach cookie. specified, one following values given: \"Strict\", \"Lax\", \"None\". \"None\" specified, secure flag MUST also set modern browsers accept cookie. error returned same_site = \"None\" secure = FALSE. specified non-character given, SameSite policy attached cookie. path URI path cookie available future requests. Defaults request URI. Set \"/\" make cookie available requests host.","code":""},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store session data in encrypted cookies. — session_cookie","text":"cookie's secret encryption key value must consistent maintain req$session information server restarts.","code":""},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":"storing-secure-keys","dir":"Reference","previous_headings":"","what":"Storing secure keys","title":"Store session data in encrypted cookies. — session_cookie","text":"quick get started user session cookies using plumber, please exercise precaution storing secure key information. malicious person gain access secret key, able eavesdrop req$session information /tamper req$session information processed. Please: store keys source control. store keys disk permissions allow accessed everyone. store keys databases can queried everyone. Instead, please: Use key management system, 'keyring' (preferred) Store secret file disk appropriately secure permissions, \"user read \" (Sys.chmod(\"myfile.txt\", mode = \"0600\")), prevent others reading . Examples solutions done Examples section.","code":""},{"path":[]},{"path":"https://www.rplumber.io/reference/session_cookie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store session data in encrypted cookies. — session_cookie","text":"","code":"if (FALSE) { # \\dontrun{  ## Set secret key using `keyring` (preferred method) keyring::key_set_with_value(\"plumber_api\", plumber::random_cookie_key())   # Load a plumber API plumb_api(\"plumber\", \"01-append\") %>%   # Add cookie support via `keyring`   pr_cookie(     keyring::key_get(\"plumber_api\")   ) %>%   pr_run()   #### -------------------------------- ###   ## Save key to a local file pswd_file <- \"normal_file.txt\" cat(plumber::random_cookie_key(), file = pswd_file) # Make file read-only Sys.chmod(pswd_file, mode = \"0600\")   # Load a plumber API plumb_api(\"plumber\", \"01-append\") %>%   # Add cookie support and retrieve secret key from file   pr_cookie(     readLines(pswd_file, warn = FALSE)   ) %>%   pr_run() } # }"},{"path":"https://www.rplumber.io/reference/validate_api_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate OpenAPI Spec — validate_api_spec","title":"Validate OpenAPI Spec — validate_api_spec","text":"Validate OpenAPI Spec using Swagger CLI calls Swagger Parser.","code":""},{"path":"https://www.rplumber.io/reference/validate_api_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate OpenAPI Spec — validate_api_spec","text":"","code":"validate_api_spec(pr, verbose = TRUE)"},{"path":"https://www.rplumber.io/reference/validate_api_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate OpenAPI Spec — validate_api_spec","text":"pr Plumber API verbose Logical determines \"valid\" statement displayed. Defaults TRUE","code":""},{"path":"https://www.rplumber.io/reference/validate_api_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate OpenAPI Spec — validate_api_spec","text":"api deemed invalid, error thrown. function  may altered, changed, removed future.","code":""},{"path":"https://www.rplumber.io/reference/validate_api_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate OpenAPI Spec — validate_api_spec","text":"","code":"if (FALSE) { # \\dontrun{ pr <- plumb_api(\"plumber\", \"01-append\") validate_api_spec(pr) } # }"},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-development-version","dir":"Changelog","previous_headings":"","what":"plumber (development version)","title":"plumber (development version)","text":"Fixes #956, allowing port specified environment variable. User-provided ports must 1024 49151 (following IANA guidelines) may known unsafe port. plumber now throw error invalid port requested. (@shikokuchuo @gadenbuie #963) Added support graphic devices provided ragg svglite (@thomasp85 #964) parse_rds(), parse_feather(), parse_parquet() longer writes data disk parsing (@thomasp85, #942) Returning error messages now turned default rather turned running interactively turned (@thomasp85, #962)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-122","dir":"Changelog","previous_headings":"","what":"plumber 1.2.2","title":"plumber 1.2.2","text":"CRAN release: 2024-03-25 Allow set plumber options using environment variables ?options_plumber. (@meztez #934) Add support quoted boundary multipart request parsing. (@meztez #924) Fix #916, related parseUTF8 return value attribute srcfile Windows. (#930)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-121","dir":"Changelog","previous_headings":"","what":"plumber 1.2.1","title":"plumber 1.2.1","text":"CRAN release: 2022-09-06 Update docs CRAN (#878)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-120","dir":"Changelog","previous_headings":"","what":"plumber 1.2.0","title":"plumber 1.2.0","text":"CRAN release: 2022-07-09","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"plumber 1.2.0","text":"First line endpoint comments interpreted OpenAPI ‘summary’ field subsequent comment lines interpreted ‘description’ field. (@wkmor1 #805)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"plumber 1.2.0","text":"Static file handler now serves HEAD requests. (#798) Introduces new GeoJSON serializer parser. GeoJSON objects parsed sf objects sf sfc objects serialized GeoJSON. (@josiahparry, #830) Add new Octet-Stream serializer. wrapper around Content Type serializer type application/octet-stream. (#864) Update feather serializer use arrow package. new default feather MIME type application/vnd.apache.arrow.file. (@pachadotdev #849) Add parquet serializer parser using arrow package (@pachadotdev #849) Updated example 14-future use promises::future_promise() added endpoint uses coro write simpler async / promises code (#785) Add path argument pr_cookie() allowing Secure cookies define served (@jtlandis #850)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"plumber 1.2.0","text":"OpenAPI specification collision using examples. (@meztez #820) Static handler returns Last-Modified response header. (#798) OpenAPI response type detection scoping issue. Use serializer defined Content-Type header instead. (@meztez, #789) default shared secret filter returns error responses without throwing error. (#808) Remove response bodies (therefore Content-Length header) status codes forbid HTTP specification (e.g. 1xx, 204, 304). (@atheriel #758, @meztez #760) Decode path URI attempting serve static assets (@meztez #754).","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-110","dir":"Changelog","previous_headings":"","what":"plumber 1.1.0","title":"plumber 1.1.0","text":"CRAN release: 2021-03-24","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"plumber 1.1.0","text":"Force json serialization endpoint error responses instead using endpoint serializer. (@meztez, #689) plumbing Plumber file using Plumber router modifier (#* @plumber), error thrown original router returned. (#738) options_plumber() now requires options named. option name provided, error thrown. (#746)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"plumber 1.1.0","text":"Added option plumber.trailingSlash. option (disabled default) allows routes redirected route definitions trailing slash. example, GET request submitted /test?=1 /test route defined, GET /test/ route definition exist, original request respond 307 reattempt GET /test/?=1. option enabled default future release. logic executed calling 404 handler. (#746) Added experimental option plumber.methodNotAllowed. option (enabled default) allows status 405 returned invalid method used requesting valid route. logic executed calling default 404 handler. (#746) Passing edit = TRUE plumb_api() open API source file. (#699) OpenAPI Specification can set using file path. (@meztez #696) Guess OpenAPI response content type serializer. (@meztez #684) Undeprecated Plumber$run(debug=, swaggerCallback=) added parameters Plumber$run(docs=, quiet=) pr_run(debug=, docs=, swaggerCallback=, quiet=). Now, four parameters produce lingering effects Plumber router. (@jcheng5 #765) Setting quiet = TRUE suppress routine startup messages. Setting debug = TRUE, display information error occurs. See pr_set_debug(). Setting docs update visual documentation. See pr_set_docs(). Set swaggerCallback function called url documentation, NULL nothing. See pr_set_docs_callback(). update PlumberEndpoint path initialization, call new PlumberEndpoint$setPath(path). update internal path matching meta data. (Active bindings used avoid breaking changes.) (@blairj09 #770) PlumberStep (PlumberEndpoint PlumberFilter) received new field $srcref method $getFunc(). $srcref contain corresponding srcref information original source file. $getFunc() return evaluated function. (#782) Allow spaces @apiTag @tag tag surrounded single double quotes. (#685)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"plumber 1.1.0","text":"Ignore regular comments block parsing. (@meztez #718) Block parsing comments, tags responses ordering match plumber api ordering. (#722) Fixed bug httpuv return status 500 body exception occurred headers set response object. (#745) Fixed bug pr_*() returned invisibly. Now pr_*() methods print router displayed console. (#740) calling Plumber$handle() defining new PlumberEndpoint, ... checked invalid names. (@meztez, #677) /__swagger__/ now always redirects /__docs__/, even Swagger isn’t selected interface. Use options(plumber.legacyRedirects = FALSE) disable behavior. (@blairj09 #694) Fixed available_apis() bug packages printed available APIs. (@meztez #708) Fixed Plumber $routes resolution bugs. Routes now returned lexicographical order. (@meztez #702) Plumber now display circular reference one found printing. (#738) Changed future::plan() multiprocess multisession example API 14-future “Strategy ‘multiprocess’ deprecated future (>= 1.20.0)”. (#747) Setting options plumber.docs.callback NULL also set deprecated supported option plumber.swagger.url. (#766)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-100","dir":"Changelog","previous_headings":"","what":"plumber 1.0.0","title":"plumber 1.0.0","text":"CRAN release: 2020-09-14","code":""},{"path":[]},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-router-1-0-0","dir":"Changelog","previous_headings":"New features","what":"Plumber router","title":"plumber 1.0.0","text":"Added support promises endpoints, filters, hooks. allows multi-core execution paired future. See plumb_api(\"plumber\", \"13-promises\") plumb_api(\"plumber\", \"14-future\") example implementations. (#248) Added Tidy API natural usage magrittr’s %>%. example, plumber object can now initiated run pr() %>% pr_run(port = 8080). examples, see (@blairj09, #590) Added support #' @plumber tag gain programmatic access plumber router via function(pr) {....}. See system.file(\"plumber/06-sessions/plumber.R\", package = \"plumber\") adds cookie support within plumber.R. (@meztez @blairj09, #568) Added plumb_api() standardizing locate (inst/plumber) run (plumb_api(package, name)) plumber apis inside R package. view available Plumber APIs, call available_apis(). (#631) Improved argument handling Plumber Endpoint route definitions. See system.file(\"plumber/17-arguments/plumber.R\", package = \"plumber\") view example expected output plumb_api(\"plumber\", \"17-arguments\") retrieve api. Improvements include: value supplied req res arguments route definition now always Plumber request response objects. past, guaranteed. (#666, #637) assist conflicts argument names deriving different locations, req$argsQuery, req$argsPath, req$argsBody added access query, path, req$body parameters, respectively. reason, suggest defining routes req res (.e., function(req, res) {}) accessing argument(s) new fields avoid naming conflicts. (#637) error longer thrown multiple arguments matched Plumber Endpoint route definition. Instead, Plumber now retains first named argument according highest priority match (req$argsQuery 1st priority, req$argsPath, req$argsBody). (#666) Unnamed elements added req$args filters creating req$argsBody longer throw error. passed via ... (#666)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"openapi-1-0-0","dir":"Changelog","previous_headings":"New features","what":"OpenAPI","title":"plumber 1.0.0","text":"API Documentation now hosted /__docs__. swagger documentation used, /__swagger__ redirect /__docs__. (#654) Added OpenAPI support array parameters using syntax name:[type] new type list (synonym df, data.frame). (@meztez, #532) Added user provided OpenAPI Specification handler Plumber router. Use $setApiSpec() provide function alter Plumber generated OpenAPI Specification returned Plumber router method $getApiSpec(). also affects /openapi.json /openapi.yaml (#365)(@meztez, #562) Added validate_api_spec() validate Plumber API produces valid OpenAPI Specification. (Experimental!) (#633)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"serializers-1-0-0","dir":"Changelog","previous_headings":"New features","what":"Serializers","title":"plumber 1.0.0","text":"Added as_attachment(value, filename) method allows routes return file attachment custom name. (#585) Serializer functions can now return PlumberEndpoint preexec postexec hooks addition serializer function using endpoint_serializer(). allows image serializers turn corresponding graphics device route executes turn graphics device route executes. (#630) PNG, JPEG, SVG image serializers exported methods serializer_png(), serializer_jpeg(), serializer_svg() respectively. addition methods, serializer_tiff(), serializer_bmp(), serializer_pdf() added. graphics device serializer wraps around serializer_device(), used making graphics device serializers. (#630) New serializers serializer_yaml(): Return object serialized yaml (@meztez, #556) serializer_csv(): Return comma separated value (@pachamaltese, #520) serializer_tsv(): Return tab separated value (#630) serializer_feather(): Return object serialized feather (#626) serializer_text(): Return text content (#585) serializer_cat(): Return text content calling cat() (#585) serializer_print(): Return text content calling print() (#585) serializer_format(): Return text content calling format() (#585) serializer_svg(): Return image saved SVG (@pachamaltese, #398) serializer_headers(header_list): Method sets list static headers serialized value. Heavily inspired @ycphs (#455). (#585) serializer_write_file(): Method wraps serializer_content_type(), orchestrates creating, writing serialized content , reading , removing temp file. (#660)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"body-parsing-1-0-0","dir":"Changelog","previous_headings":"New features","what":"Body parsing","title":"plumber 1.0.0","text":"Added support request body parsing (@meztez, #532) New request body parsers parser_csv(): Parse request body commas separated value (#584) parser_json(): Parse request body JSON (@meztez, #532) parser_multi(): Parse multi part request bodies (@meztez, #532) (#663) parser_octet(): Parse request body octet stream (@meztez, #532) parser_form(): Parse request body form input (@meztez, #532) parser_rds(): Parse request body RDS file input (@meztez, #532) parser_text(): Parse request body plain text (@meztez, #532) parser_tsv(): Parse request body tab separated value (#584) parser_yaml(): Parse request body yaml (#584) parser_none(): parse request body (#584) parser_yaml(): Parse request body (@meztez, #556) parser_feather(): Parse request body using feather (#626) Pseudo parser named \"\" allow using parsers. (recommended production!) (#584) parsed request body values stored req$body. (#663) multipart/* content parsed, req$body contain named output webutils::parse_multipart() add parsed value part. Look access provided information (e.g., name, filename, content_type, etc). addition, req$argsBody (used route argument matching) contain named reduced form information parsed values (filenames) combined name. (#663)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"visual-documentation-1-0-0","dir":"Changelog","previous_headings":"New features","what":"Visual Documentation","title":"plumber 1.0.0","text":"Generalize user interface integration. Plumber can now use OpenAPI compatible user interfaces like RapiDoc (https://github.com/mrin9/RapiDoc) Redoc (https://github.com/Redocly/redoc). Pending CRAN approbations, development R packages available https://github.com/meztez/rapidoc/ https://github.com/meztez/redoc/. (@meztez, #562) Changed Swagger UI use swagger R package display swagger page. (#365) Added support swagger mounted routers (@bradleyhd, #274).","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"security-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Security improvements","title":"plumber 1.0.0","text":"Secret session cookies now encrypted using sodium. prior req$session information lost. Please see ?session_cookie information. (#404) Session cookies set HttpOnly flag default mitigate cross-site scripting (XSS). Please see ?session_cookie information. (#404) Wrap jsonlite::fromJSON ensure jsonlite never reads input remote address (file path URL) attempts parse . known way exploit behavior plumber unless API using encrypted cookies attacker knew encryption key order craft arbitrary cookies. (#325)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"plumber 1.0.0","text":"plumb()ing file (Plumber$new(file)), working directory set file’s directory parsing file. running Plumber API, working directory set file’s directory running.(#631) Plumber’s OpenAPI Specification now defined using OpenAPI 3, upgrading Swagger Specification. (#365) Plumber router $run() method arguments swagger, swaggerCallback debug now deprecated. User interface url callback now enabled default managed Plumber router $setDocs(), $setDocsCallback(), $setDebug() methods options plumber.docs plumber.docs.callback. (@meztez, #562) plumb() now returns object class \"Plumber\" (previously \"plumber\"). check object Plumber router, use new method is_plumber(). (#653) PlumberStatic objects now class \"PlumberStatic\" (previously \"plumberstatic\"). (#653) source files used plumber must use UTF-8 encoding contain non-ASCII characters (@shrektan, #312, #328). options(plumber.debug) set anymore running plumber application. Instead retrieve debug value using $getDebug() Plumber router directly. Ex: function(req, res) { req$pr$getDebug() }. (#639) PlumberEndpoint’s method $exec() now shape $exec(req, res) (vs $exec(...)). allows fine tune control arguments sent endpoint function. creating PlumberFilter PlumberEndpoint, error thrown expr evaluate function. (#666)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"deprecations-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"plumber 1.0.0","text":"Shorthand serializers now deprecated. @html, @json, @png, @jpeg, @svg replaced @serializer syntax. Ex: @serializer html @serializer jpeg (#630) plumber R6 object deprecated renamed Plumber. PlumberStatic’s inherited class updated Plumber. (#653) hookable R6 object deprecated renamed Hookable. Plumber PlumberStep’s inherited class updated Hookable. (#653) addSerializer() deprecated favor register_serializer() (#584) getCharacterSet() deprecated favor get_character_set() (#651) randomCookieKey() deprecated favor random_cookie_key() (#651) sessionCookie() deprecated favor session_cookie() (#651) DigitalOcean helper functions now defunct (do_*()). functionality documentation deploy DigitalOcean moved plumberDeploy (@meztez) (#649)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"minor-new-features-and-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor new features and improvements","title":"plumber 1.0.0","text":"Documentation updated now presented using pkgdown (#570) New hex logo! Thank @allisonhorst ! (#570) Added helper method is_plumber(pr) determine object Plumber router. (#653) Added support SameSite Cookie attribute. (@chris-dudley, #640) calling include_file(), content_type automatically inferred file extension content_type provided. (#631) plumb()ing file, arguments supplied parsers serializers may values defined earlier file. (@meztez, #620) Updated Docker files. New Docker repo now rstudio/plumber. Updates heavily inspired @mskyttner (#459). (#589) Support HTTP 405 Code. (@meztez, #554) Attached Plumber router incoming request object req$pr. (@meztez, #554) Documented plumber options. Added options_plumber(). (@meztez, #555) Update documentation R6 objects (@meztez, #530) Fix plumb() function plumb()ing directory plumber.R requirement valid entrypoint.R file found. (@blairj09, #471). cookie information large (> 4093 bytes), warning displayed. (#404) Added new shorthand types url parameters. (@byzheng, #388) Plumber files now evaluated . Prior plumber behavior sourced endpoint functions twice non-endpoint code blocks . (#328) Improve speed canServe() method PlumberEndpoint class (@atheriel, #484) Get file extension content types using mime package. (#660) Endpoints produce images within promises::promise() now use expected graphics device. (#669)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"plumber 1.0.0","text":"Handle plus signs URI space characters instead actual plus signs (@meztez, #618) Paths missing leading / / prepended path location. (#656) Fix possible bugs due mounted routers without leading slashes (@atheriel, #476 #501). Modified images serialization use content-type serializer. Fixes issue images pre/postserialize hooks (@meztez, #518). Fix bug preventing error handling serializer fails (@antoine-sachet, #490) Fix URL-decoding query parameters URL-encoding/decoding cookies. now use httpuv::decodeURIComponent instead httpuv::decodeURI. (@antoine-sachet, #462) Fixed bug functions defined earlier file found plumb()ing file. (#416) multiline request body now collapsed single line (@robertdj, #270 #297). Bumped version httpuv >= 1.4.5.9000 address unexpected segfault (@shapenaji, #289) Date response header now supplied httpuv plumber. Fixes non standard date response header issues using different locales. (@shrektan, #319, #380) Due incompatibilities multipart body values, req$postBody calculated accessed. strongly recommended use req$bodyRaw trying create content input body. (#665)","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-046","dir":"Changelog","previous_headings":"","what":"plumber 0.4.6","title":"plumber 0.4.6","text":"CRAN release: 2018-06-05 BUGFIX: Hooks accept value argument (postroute, preserialize, postserialize) now modify incoming value documented. BUGFIX: postserialize hook now given serialized data value parameter. BUGFIX: properly handle cookie expiration values (#216). Add support tags Swagger docs (#230). Optional swaggerCallback parameter run() supply callback function reporting url swagger page. Add RStudio Project Template package.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-044","dir":"Changelog","previous_headings":"","what":"plumber 0.4.4","title":"plumber 0.4.4","text":"CRAN release: 2017-12-01 Support Expiration, HTTPOnly, Secure flags cookies (#87). EDIT: see #216 prevented expiration working. BUGFIX: properly handle named query string post body arguments mounted subrouters. Added support static sizing images. @png @jpeg now accept parenthetical list arguments passed png() jpeg() call. enables annotations like #' @png (width = 200, height=500). Enable ByteCompile flag Set working directory DigitalOcean APIs. Respect setErrorHandler BUGFIX: export PlumberStatic Case-insensitive matching plumber.r entrypoint.r plumb()ing directory. Support query strings keys appear (#165) Fix validation error warning bottom deployed Swagger files appeared time swagger.json file hosted way hosted validator service able access . now just suppress validation swagger.json files. (#149) Support floating IPs DNS check occurs do_configure_https() Make adding swap file idempotent do_provision() can now call single droplet multiple times. Support exit hook can define function evaluated API interrupted. e.g. pr <- plumb(\"plumber.R\"); pr$registerHook(\"exit\", function(){ print(\"Bye bye!\") }) Fixed bug single function couldn’t support multiple paths single verb (#203). Support negative numbers numeric path segments (#212) Support . string path segments","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-042","dir":"Changelog","previous_headings":"","what":"plumber 0.4.2","title":"plumber 0.4.2","text":"CRAN release: 2017-07-24 Development version 0.4.2. working move even/odd release cycles, prematurely bumped 0.4.0 one might get skipped, making next CRAN release 0.4.2.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-040","dir":"Changelog","previous_headings":"","what":"plumber 0.4.0","title":"plumber 0.4.0","text":"BREAKING: Listen localhost instead listening publicly default. BREAKING: longer set Access-Control-Allow-Origin HTTP header *. previously done convenience ’ve decided prioritize security removing default. can still add header route want accessible origins. BREAKING: Listen random port default instead always 8000. can controlled using port parameter run(), setting plumber.port option. BREAKING: Removed PlumberProcessor class replaced notion hooks. See registerHook registerHooks Plumber router. BREAKING: addGlobalProcessor method Plumber routers now takes list added hooks instead Processor. Note sessionCookie also updated behave accordingly, meaning convention pr$addGlobalProcessor(sessionCookie(\"secret\", \"cookieName\")) continue work release. BREAKING: sessionCookie now returns list instead Processor. Note addGlobalProcessor also updated behave accordingly, meaning convention pr$addGlobalProcessor(sessionCookie(\"secret\", \"cookieName\")) continue work release. DEPRECATION: Deprecated addAssets method Plumber routers. Use PlumberStatic mount method attach static router. DEPRECATION: Deprecated addEndpoint method favor handle method Plumber routers. Removed support processors, params, comments parameters longer supported. DEPRECATION: Deprecated addFilter method Plumber routers favor new filter method. Removed support processor parameter. DEPRECATION: Deprecated addGlobalProcessor method Plumber routers. undocumented setDefaultErrorHandler method Plumber routers now takes function returns error handler function. top-level function takes single param named debug managed debug parameter run() method. Added support OPTIONS HTTP requests via @options annotation. Add support entrypoint.R plumb()ing directory. file exists, expected return Plumber router representing API contained directory. doesn’t exist, behavior unaltered. plumber.R entrypoint.R exist, entrypoint.R takes precedence. plumb() current directory default arguments provided. Added debug parameter run method can set TRUE order get insight API errors.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-033","dir":"Changelog","previous_headings":"","what":"plumber 0.3.3","title":"plumber 0.3.3","text":"plumb() now accepts argument dir, referring directory containing plumber.R, may provided instead file.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-032","dir":"Changelog","previous_headings":"","what":"plumber 0.3.2","title":"plumber 0.3.2","text":"CRAN release: 2017-05-22 Introduced do_provision(), do_deploy_api(), do_remove_api() do_configure_https() functions provision manage APIs cloud server running DigitalOcean. source() referenced R file plumb inside new environment inherits directly GlobalEnv. provides explicit control exactly environment behave. Added @serializer htmlwidget support rendering returning self-contained htmlwidget plumber endpoint. Properly handle cookies value. (#88) Don’t convert + character query string space.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-031","dir":"Changelog","previous_headings":"","what":"plumber 0.3.1","title":"plumber 0.3.1","text":"CRAN release: 2016-10-04 Add method consume JSON post (can still send query string body POST request well).","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-030","dir":"Changelog","previous_headings":"","what":"plumber 0.3.0","title":"plumber 0.3.0","text":"BREAKING CHANGE: serializer factories now registered instead serializer . Thus, addSerializer() now expects function returns serializer, Response$new() now expects serializer rather character string naming serializer. Internally serializer attached response rather name serializer. allows serializer customize behavior. Accept additional argument @serializer annotation – R code passed argument serializer factory. See example 09-content-type.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-024","dir":"Changelog","previous_headings":"","what":"plumber 0.2.4","title":"plumber 0.2.4","text":"CRAN release: 2016-04-14 Add filter parses sets req$cookies list corresponding cookies provided request. Responses can set multiple cookies Bug Fix: convert non-character arguments setCookie character URL- encoding.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-023","dir":"Changelog","previous_headings":"","what":"plumber 0.2.3","title":"plumber 0.2.3","text":"Set options(warn=1) execution user code warnings immediately visible console, rather storing server stopped.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-022","dir":"Changelog","previous_headings":"","what":"plumber 0.2.2","title":"plumber 0.2.2","text":"Add sessionCookie function define processor can used globalProcessor router encrypt values req$session store encrypted cookie user’s browser. Added setCookie method response (primitively) allows set cookie included response. Add addGlobalProcessor method plumber class support processor runs processor single time, filters endpoint. Document public params CHECK passes","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-021","dir":"Changelog","previous_headings":"","what":"plumber 0.2.1","title":"plumber 0.2.1","text":"Add roxygen2 documentation exported functions Remove warning README API seems stabilizing.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-020","dir":"Changelog","previous_headings":"","what":"plumber 0.2.0","title":"plumber 0.2.0","text":"BREAKING: Changed variable-path routing use bracketed format instead just colon. BREAKING: Renamed PlumberRouter R6 object just Plumber. Support addEndpoint() addFilter() Plumber object. Added support #* prefix.","code":""},{"path":"https://www.rplumber.io/news/index.html","id":"plumber-010","dir":"Changelog","previous_headings":"","what":"plumber 0.1.0","title":"plumber 0.1.0","text":"Initial Release","code":""}]
